[{"EN": {"name": "dfs", "description": "Depth-first search - DFS\njill-j\u00eann vie et christoph durr - 2015-2019\n", "functions": [{"name": "dfs_grid", "decription": "DFS on a grid, mark connected component, iterative version\n\n    :param grid: matrix, 4-neighborhood\n    :param i,j: cell in this matrix, start of DFS exploration\n    :param free: symbol for walkable cells\n    :param mark: symbol to overwrite visited vertices\n    :complexity: linear\n    "}, {"name": "dfs_grid_recursive", "decription": "DFS on a grid, mark connected component, iterative version\n\n    :param grid: matrix, 4-neighborhood\n    :param i,j: cell in this matrix, start of DFS exploration\n    :param free: symbol for walkable cells\n    :param mark: symbol to overwrite visited vertices\n    :complexity: linear\n    "}, {"name": "dfs_iterative", "decription": "DFS, detect connected component, iterative implementation\n\n    :param graph: directed graph in listlist or listdict format\n    :param int node: to start graph exploration\n    :param boolean-table seen: will be set true for the connected component\n          containing node.\n    :complexity: `O(|V|+|E|)`\n    "}, {"name": "dfs_recursive", "decription": "DFS, detect connected component, recursive implementation\n\n    :param graph: directed graph in listlist or listdict format\n    :param int node: to start graph exploration\n    :param boolean-table seen: will be set true for the connected component\n          containing node.\n    :complexity: `O(|V|+|E|)`\n    "}, {"name": "dfs_tree", "decription": "DFS, build DFS tree in unweighted graph\n\n       :param graph: directed graph in listlist or listdict format\n       :param int start: source vertex\n       :returns: precedence table\n       :complexity: `O(|V|+|E|)`\n       "}, {"name": "find_cycle", "decription": "find a cycle in an undirected graph\n\n    :param graph: undirected graph in listlist or listdict format\n    :returns: list of vertices in a cycle or None\n    :complexity: `O(|V|+|E|)`\n    "}], "classes": []}, "FR": {"name": "dfs", "description": "Depth-first search - DFS\njill-j\u00eann vie et christoph durr - 2015-2019\n", "functions": [{"name": "dfs_grid", "decription": "DFS sur une grille, marque du composant connect\u00e9, it\u00e9ratif version\n\n:param grille: matrix, le 4-voisinage\n:param i,j: cellule dans cette matrice, d\u00e9but de DFS exploration\n:param gratuit: symbole pour les pi\u00e9tons, les cellules\n:param marque: symbole de remplacer visit\u00e9s sommets\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "dfs_grid_recursive", "decription": "DFS sur une grille, marque du composant connect\u00e9, it\u00e9ratif version\n\n:param grille: matrix, le 4-voisinage\n:param i,j: cellule dans cette matrice, d\u00e9but de DFS exploration\n:param gratuit: symbole pour les pi\u00e9tons, les cellules\n:param marque: symbole de remplacer visit\u00e9s sommets\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "dfs_iterative", "decription": "DFS, de d\u00e9tecter les composants connect\u00e9s, it\u00e9ratif de mise en \u0153uvre\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param int n\u0153ud: pour d\u00e9marrer le graphe d'exploration\n:param boolean-table vu: sera fix\u00e9 \u00e0 true pour le composant connect\u00e9\ncontenant le n\u0153ud.\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "dfs_recursive", "decription": "DFS, de d\u00e9tecter les composants connect\u00e9s, r\u00e9cursive de la mise en \u0153uvre\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param int n\u0153ud: pour d\u00e9marrer le graphe d'exploration\n:param boolean-table vu: sera fix\u00e9 \u00e0 true pour le composant connect\u00e9\ncontenant le n\u0153ud.\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "dfs_tree", "decription": "DFS, construire arborescence DFS dans le graphe non pond\u00e9r\u00e9\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param int start: source: vertex\n:retourne: tableau de pr\u00e9c\u00e9dence\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "find_cycle", "decription": "trouver un cycle dans un graphe non-dirig\u00e9\n\n:param graphe: graphe non-dirig\u00e9 dans listlist ou listdict format\n:renvoie la liste des sommets dans un cycle ou Aucun\n:complexit\u00e9: O(|V|+|E|)`\n"}], "classes": []}}, {"EN": {"name": "arithm", "description": "arithmetic functions\nchristoph d\u00fcrr - jill-j\u00eann vie - 2013-2019\n", "functions": [{"name": "bezout", "decription": "B\u00e9zout coefficients for a and b\n\n    :param a,b: non-negative integers\n    :complexity: O(log a + log b)\n    "}, {"name": "binom", "decription": "Binomial coefficients for :math:`n choose k`\n\n    :param n,k: non-negative integers\n    :complexity: O(k)\n    "}, {"name": "binom_modulo", "decription": "Binomial coefficients for :math:`n choose k`, modulo p\n\n    :param n,k: non-negative integers\n    :complexity: O(k)\n    "}, {"name": "inv", "decription": "Inverse of a in :math:`{mathbb Z}_p`\n\n    :param a,p: non-negative integers\n    :complexity: O(log a + log p)\n    "}, {"name": "pgcd", "decription": "Greatest common divisor for a and b\n\n    :param a,b: non-negative integers\n    :complexity: O(log a + log b)\n    "}], "classes": []}, "FR": {"name": "arithm", "description": "des fonctions arithm\u00e9tiques\nchristoph d\u00fcrr - jill-j\u00eann vie - 2013-2019\n", "functions": [{"name": "bezout", "decription": "Les coefficients de B\u00e9zout pour a et b\n\n:param a,b: entiers non n\u00e9gatifs\n:complexit\u00e9: O(log a + log b)\n"}, {"name": "binom", "decription": "Coefficients binomiaux pour :math:`n choisir k`\n\n:param n,k: entiers non n\u00e9gatifs\n:complexit\u00e9: O(k)\n"}, {"name": "binom_modulo", "decription": "Coefficients binomiaux pour :math:`n choisir k`, modulo p\n\n:param n,k: entiers non n\u00e9gatifs\n:complexit\u00e9: O(k)\n"}, {"name": "inv", "decription": "L'Inverse de a dans :math:`{mathbb Z}_p`\n\n:param a,p: nombres entiers non n\u00e9gatifs\n:complexit\u00e9: O(log a + log p)\n"}, {"name": "pgcd", "decription": "Le plus grand commun diviseur de a et b\n\n:param a,b: entiers non n\u00e9gatifs\n:complexit\u00e9: O(log a + log b)\n"}], "classes": []}}, {"EN": {"name": "fenwick", "description": "Fenwick tree\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [], "classes": [{"name": "Fenwick", "description": "maintains a tree to allow quick updates and queries\n    ", "methods": [{"name": "__init__", "description": "stores a table t and allows updates and queries\n        of prefix sums in logarithmic time.\n\n        :param array t: with numerical values\n        "}, {"name": "add", "description": "\n        :param int a: index in t\n        :modifies: adds val to t[a]\n        "}, {"name": "get", "description": "Variant, reads t[a]\n\n        :param int i: negative a will return 0\n        "}, {"name": "intervalAdd", "description": "Variant, adds val to t[a], to t[a + 1] ... and to t[b]\n\n        :param int a b: with 0 <= a <= b < len(t)\n        "}, {"name": "intervalSum", "description": "\n        :param int a b: with 0 <= a <= b\n        :returns: t[a] + ... + t[b]\n        "}, {"name": "prefixSum", "description": "\n        :param int a: index in t, negative a will return 0\n        :returns: t[0] + ... + t[a]\n        "}]}]}, "FR": {"name": "fenwick", "description": "Fenwick arbre\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [], "classes": [{"name": "Fenwick", "description": "maintient un arbre pour permettre des mises \u00e0 jour rapides et les requ\u00eates\n", "methods": [{"name": "__init__", "description": "stocke un tableau t et permet des mises \u00e0 jour et des requ\u00eates\nde pr\u00e9fixe sommes en temps logarithmique.\n\n:param array t: avec des valeurs num\u00e9riques\n"}, {"name": "ajouter", "description": "\n:param int a: indice dans t\n:modifie: ajoute val de t[a]\n"}, {"name": "obtenez de l'", "description": "Variante, lit t[a]\n\n:param int i: n\u00e9gative sera de retour 0\n"}, {"name": "intervalAdd", "description": "Variante, ajoute val de t[a], t[a + 1] ... et \u00e0 t[b]\n\n:param int b: avec 0 <= a <= b < len(t)\n"}, {"name": "intervalSum", "description": "\n:param int b: avec 0 <= a <= b\n:retourne: t[a] + ... + t[b]\n"}, {"name": "prefixSum", "description": "\n:param int a: indice dans t, n\u00e9gative sera de retour 0\n:retourne: t[0] + ... + t[a]\n"}]}]}}, {"EN": {"name": "sudoku", "description": "Solving Sudoku (nanpure)\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [{"name": "assignment", "decription": null}, {"name": "blk", "decription": null}, {"name": "bv", "decription": null}, {"name": "col", "decription": null}, {"name": "cv", "decription": null}, {"name": "rc", "decription": null}, {"name": "row", "decription": null}, {"name": "rv", "decription": null}, {"name": "sudoku", "decription": "Solving Sudoku\n\n    :param G: integer matrix with 0 at empty cells\n    :returns bool: True if grid could be solved\n    :modifies: G will contain the solution\n    :complexity: huge, but linear for usual published 9x9 grids\n    "}, {"name": "val", "decription": null}], "classes": []}, "FR": {"name": "sudoku", "description": "La r\u00e9solution de Sudoku (nanpure)\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [{"name": "affectation", "decription": null}, {"name": "blk", "decription": null}, {"name": "bv", "decription": null}, {"name": "col", "decription": null}, {"name": "cv", "decription": null}, {"name": "rc", "decription": null}, {"name": "ligne", "decription": null}, {"name": "rv", "decription": null}, {"name": "sudoku", "decription": "La R\u00e9solution De Sudoku\n\n:param G: integer matrice de 0 \u00e0 cellules vides\n:renvoie un bool\u00e9en: True si la grille pourrait \u00eatre r\u00e9solu\n:modifie: G contiendra la solution\n:complexit\u00e9: \u00e9norme, mais lin\u00e9aire pour habitude publi\u00e9 des grilles de 9x9\n"}, {"name": "val", "decription": null}], "classes": []}}, {"EN": {"name": "skip_list", "description": "skip-list\nlouis abraham - 2017-2019\n\nInspired by https://kunigami.blog/2012/09/25/skip-lists-in-python/\ncount contains the gap between the positions\n(https://www.cs.bgu.ac.il/~ds112/wiki.files/ds112_ps7.pdf)\n", "functions": [], "classes": [{"name": "AbstractSkipList", "description": null, "methods": [{"name": "__bool__", "description": null}, {"name": "__contains__", "description": null}, {"name": "__getattr__", "description": null}, {"name": "__init__", "description": null}, {"name": "__iter__", "description": "Iterable in ascending order"}, {"name": "__len__", "description": null}, {"name": "_updateList", "description": null}, {"name": "find", "description": null}, {"name": "getkth", "description": "starts from 0"}, {"name": "insert", "description": null}, {"name": "lastKey", "description": "lastKey(key) < key"}, {"name": "nextKey", "description": "nextKey(key) >= key"}, {"name": "nextNode", "description": null}, {"name": "randomHeight", "description": null}, {"name": "remove", "description": null}]}, {"name": "SortedDict", "description": null, "methods": [{"name": "__bool__", "description": null}, {"name": "__contains__", "description": null}, {"name": "__delitem__", "description": null}, {"name": "__getattr__", "description": null}, {"name": "__getitem__", "description": null}, {"name": "__init__", "description": null}, {"name": "__iter__", "description": "Iterable in ascending order"}, {"name": "__len__", "description": null}, {"name": "__repr__", "description": null}, {"name": "__setitem__", "description": null}, {"name": "_updateList", "description": null}, {"name": "find", "description": null}, {"name": "getkth", "description": "starts from 0"}, {"name": "insert", "description": null}, {"name": "keys", "description": null}, {"name": "lastKey", "description": "lastKey(key) < key"}, {"name": "nextKey", "description": "nextKey(key) >= key"}, {"name": "nextNode", "description": null}, {"name": "randomHeight", "description": null}, {"name": "remove", "description": null}]}, {"name": "SortedSet", "description": null, "methods": [{"name": "__bool__", "description": null}, {"name": "__contains__", "description": null}, {"name": "__getattr__", "description": null}, {"name": "__init__", "description": null}, {"name": "__iter__", "description": "Iterable in ascending order"}, {"name": "__len__", "description": null}, {"name": "__repr__", "description": null}, {"name": "_updateList", "description": null}, {"name": "add", "description": null}, {"name": "find", "description": null}, {"name": "getkth", "description": "starts from 0"}, {"name": "insert", "description": null}, {"name": "lastKey", "description": "lastKey(key) < key"}, {"name": "nextKey", "description": "nextKey(key) >= key"}, {"name": "nextNode", "description": null}, {"name": "pop", "description": "Pops the first element"}, {"name": "randomHeight", "description": null}, {"name": "remove", "description": null}]}]}, "FR": {"name": "skip_list", "description": "skip-list\nlouis abraham - 2017-2019\n\nInspir\u00e9 par https://kunigami.blog/2012/09/25/skip-lists-in-python/\nle comte contient l'\u00e9cart entre les positions\n(https://www.cs.bgu.ac.il/~ds112/wiki.fichiers/ds112_ps7.pdf)\n", "functions": [], "classes": [{"name": "AbstractSkipList", "description": null, "methods": [{"name": "__bool__", "description": null}, {"name": "__contient__", "description": null}, {"name": "__getattr__", "description": null}, {"name": "__init__", "description": null}, {"name": "__iter__", "description": "It\u00e9rable dans l'ordre croissant"}, {"name": "__len__", "description": null}, {"name": "_updateList", "description": null}, {"name": "trouver", "description": null}, {"name": "getkth", "description": "commence \u00e0 partir de 0"}, {"name": "ins\u00e9rer", "description": null}, {"name": "lastKey", "description": "lastKey(cl\u00e9) < key"}, {"name": "nextKey", "description": "nextKey(cl\u00e9) >= cl\u00e9"}, {"name": "nextNode", "description": null}, {"name": "randomHeight", "description": null}, {"name": "supprimer", "description": null}]}, {"name": "SortedDict", "description": null, "methods": [{"name": "__bool__", "description": null}, {"name": "__contient__", "description": null}, {"name": "__delitem__", "description": null}, {"name": "__getattr__", "description": null}, {"name": "__getitem__", "description": null}, {"name": "__init__", "description": null}, {"name": "__iter__", "description": "It\u00e9rable dans l'ordre croissant"}, {"name": "__len__", "description": null}, {"name": "__repr__", "description": null}, {"name": "__setitem__", "description": null}, {"name": "_updateList", "description": null}, {"name": "trouver", "description": null}, {"name": "getkth", "description": "commence \u00e0 partir de 0"}, {"name": "ins\u00e9rer", "description": null}, {"name": "touches", "description": null}, {"name": "lastKey", "description": "lastKey(cl\u00e9) < key"}, {"name": "nextKey", "description": "nextKey(cl\u00e9) >= cl\u00e9"}, {"name": "nextNode", "description": null}, {"name": "randomHeight", "description": null}, {"name": "supprimer", "description": null}]}, {"name": "SortedSet", "description": null, "methods": [{"name": "__bool__", "description": null}, {"name": "__contient__", "description": null}, {"name": "__getattr__", "description": null}, {"name": "__init__", "description": null}, {"name": "__iter__", "description": "It\u00e9rable dans l'ordre croissant"}, {"name": "__len__", "description": null}, {"name": "__repr__", "description": null}, {"name": "_updateList", "description": null}, {"name": "ajouter", "description": null}, {"name": "trouver", "description": null}, {"name": "getkth", "description": "commence \u00e0 partir de 0"}, {"name": "ins\u00e9rer", "description": null}, {"name": "lastKey", "description": "lastKey(cl\u00e9) < key"}, {"name": "nextKey", "description": "nextKey(cl\u00e9) >= cl\u00e9"}, {"name": "nextNode", "description": null}, {"name": "pop", "description": "Pop le premier \u00e9l\u00e9ment"}, {"name": "randomHeight", "description": null}, {"name": "supprimer", "description": null}]}]}}, {"EN": {"name": "merge_ordered_lists", "description": "Merge two ordered lists\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "merge", "decription": "Merge two ordered lists\n\n    :param x:\n    :param y: x, y are nondecreasing ordered lists\n    :returns: union of x and y in order\n    :complexity: linear\n    "}], "classes": []}, "FR": {"name": "merge_ordered_lists", "description": "Fusionner deux listes ordonn\u00e9es\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "fusion", "decription": "Fusionner deux listes ordonn\u00e9es\n\n:param x:\n:param y: x, y sont nondecreasing listes ordonn\u00e9es\n:retourne: une union de x et y dans l'ordre\n:complexit\u00e9: lin\u00e9aire\n"}], "classes": []}}, {"EN": {"name": "floyd_warshall", "description": "All pairs shortest paths by Floyd-Warshall\njill-j\u00eann vie, christoph d\u00fcrr et pascal ortiz - 2014-2019\n", "functions": [{"name": "floyd_warshall", "decription": "All pairs shortest paths by Floyd-Warshall\n\n    :param weight: edge weight matrix\n    :modifies: weight matrix to contain distances in graph\n    :returns: True if there are negative cycles\n    :complexity: :math:`O(|V|^3)`\n    "}, {"name": "floyd_warshall2", "decription": "All pairs shortest paths by Floyd-Warshall.\n    An improved implementation by Pascal-Ortiz\n\n    :param weight: edge weight matrix\n    :modifies: weight matrix to contain distances in graph\n    :returns: True if there are negative cycles\n    :complexity: :math:`O(|V|^3)`\n    "}], "classes": []}, "FR": {"name": "floyd_warshall", "description": "Toutes les paires les plus courts chemins Floyd-Warshall\njill-j\u00eann vie, christoph d\u00fcrr et pascal ortiz - 2014-2019\n", "functions": [{"name": "floyd_warshall", "decription": "Toutes les paires les plus courts chemins Floyd-Warshall\n\n:param poids: edge matrice de poids\n:modifie: matrice de poids pour contenir les distances dans le graphique\n:retourne: True si il y a des cycles n\u00e9gatifs\n:complexit\u00e9: :math:`O(|V|^3)`\n"}, {"name": "floyd_warshall2", "decription": "Toutes les paires les plus courts chemins Floyd-Warshall.\nUne am\u00e9lioration de la mise en \u0153uvre par Pascal-Ortiz\n\n:param poids: edge matrice de poids\n:modifie: matrice de poids pour contenir les distances dans le graphique\n:retourne: True si il y a des cycles n\u00e9gatifs\n:complexit\u00e9: :math:`O(|V|^3)`\n"}], "classes": []}}, {"EN": {"name": "partition_refinement", "description": "Partition refinement\nchristoph d\u00fcrr - 2016-2019\n\nlog: 10/11/2016 modified to preserve class order after refinement\n     15/11/2016 this was nonsense, moved back\n", "functions": [], "classes": [{"name": "DoubleLinkedListItem", "description": "Item of a circular double linked list\n    ", "methods": [{"name": "__init__", "description": "Create a new item to be inserted before item anchor.\n           if anchor is None: create a single item circular double linked list\n        "}, {"name": "__iter__", "description": "iterate trough circular list.\n        warning: might end stuck in an infinite loop if chaining is not valid\n        "}, {"name": "insert", "description": "insert list item before anchor\n        "}, {"name": "remove", "description": null}]}, {"name": "PartitionClass", "description": "A partition is a list of classes\n    ", "methods": [{"name": "__init__", "description": null}, {"name": "__iter__", "description": "iterate trough circular list.\n        warning: might end stuck in an infinite loop if chaining is not valid\n        "}, {"name": "append", "description": "add item to the end of the item list\n        "}, {"name": "insert", "description": "insert list item before anchor\n        "}, {"name": "remove", "description": null}]}, {"name": "PartitionItem", "description": "A class is a list of items\n    ", "methods": [{"name": "__init__", "description": null}, {"name": "__iter__", "description": "iterate trough circular list.\n        warning: might end stuck in an infinite loop if chaining is not valid\n        "}, {"name": "insert", "description": "insert list item before anchor\n        "}, {"name": "remove", "description": "remove item from its class\n        "}]}, {"name": "PartitionRefinement", "description": "This data structure implements an order preserving\n    partition with refinements.\n    ", "methods": [{"name": "__init__", "description": "Start with the partition consisting of the unique class {0,1,..,n-1}\n        complexity: O(n) both in time and space\n        "}, {"name": "order", "description": "Produce a flatten list of the partition, ordered by classes\n        "}, {"name": "refine", "description": "Split every class C in the partition into C intersection pivot\n        and C setminus pivot complexity: linear in size of pivot\n        "}, {"name": "tolist", "description": "produce a list representation of the partition\n        "}]}]}, "FR": {"name": "partition_refinement", "description": "Partition de raffinement\nchristoph d\u00fcrr - 2016-2019\n\njournal: 10/11/2016 modifi\u00e9s pour pr\u00e9server l'ordre de classe apr\u00e8s raffinement\n15/11/2016 c'\u00e9tait une b\u00eatise, s'est d\u00e9plac\u00e9 en arri\u00e8re\n", "functions": [], "classes": [{"name": "DoubleLinkedListItem", "description": "\u00c9l\u00e9ment d'une circulaire doublement cha\u00een\u00e9e liste\n", "methods": [{"name": "__init__", "description": "Cr\u00e9er un nouvel \u00e9l\u00e9ment \u00e0 ins\u00e9rer, avant l'article d'ancrage.\nsi l'ancre est Aucun: cr\u00e9er un seul \u00e9l\u00e9ment circulaire doublement cha\u00een\u00e9e liste\n"}, {"name": "__iter__", "description": "it\u00e9rer auge circulaire de la liste.\navertissement: peut-fin bloqu\u00e9 dans une boucle infinie si le cha\u00eenage n'est pas valide\n"}, {"name": "ins\u00e9rer", "description": "ins\u00e9rer un \u00e9l\u00e9ment de la liste avant d'ancrage\n"}, {"name": "supprimer", "description": null}]}, {"name": "PartitionClass", "description": "Une partition est une liste de classes\n", "methods": [{"name": "__init__", "description": null}, {"name": "__iter__", "description": "it\u00e9rer auge circulaire de la liste.\navertissement: peut-fin bloqu\u00e9 dans une boucle infinie si le cha\u00eenage n'est pas valide\n"}, {"name": "ajouter", "description": "ajouter un \u00e9l\u00e9ment \u00e0 la fin de l'\u00e9l\u00e9ment de la liste\n"}, {"name": "ins\u00e9rer", "description": "ins\u00e9rer un \u00e9l\u00e9ment de la liste avant d'ancrage\n"}, {"name": "supprimer", "description": null}]}, {"name": "PartitionItem", "description": "Une classe est une liste d'\u00e9l\u00e9ments\n", "methods": [{"name": "__init__", "description": null}, {"name": "__iter__", "description": "it\u00e9rer auge circulaire de la liste.\navertissement: peut-fin bloqu\u00e9 dans une boucle infinie si le cha\u00eenage n'est pas valide\n"}, {"name": "ins\u00e9rer", "description": "ins\u00e9rer un \u00e9l\u00e9ment de la liste avant d'ancrage\n"}, {"name": "supprimer", "description": "supprimer un \u00e9l\u00e9ment \u00e0 partir de sa cat\u00e9gorie\n"}]}, {"name": "PartitionRefinement", "description": "Cette structure de donn\u00e9es met en \u0153uvre un ordre de pr\u00e9servation de\npartition avec des raffinements.\n", "methods": [{"name": "__init__", "description": "Commencer avec la partition compos\u00e9e de la classe unique {0,1,..,n-1}\ncomplexit\u00e9: O(n) \u00e0 la fois dans le temps et l'espace\n"}, {"name": "afin", "description": "Produire un aplatir liste de la partition, class\u00e9s par cat\u00e9gories\n"}, {"name": "affiner", "description": "Diviser chaque classe C dans la partition en C intersection de pivot\net C setminus pivot complexit\u00e9 lin\u00e9aire en la taille de pivot\n"}, {"name": "tolist", "description": "produire une liste \u00e0 la repr\u00e9sentation de la partition\n"}]}]}}, {"EN": {"name": "subsetsum_divide", "description": "Subsetsum by splitting\nchristoph d\u00fcrr et jill-j\u00eann vie - 2014-2019\n", "functions": [{"name": "part_sum", "decription": "All subsetsums from x_table[i:]\n\n    :param x_table: table of values\n    :param int i: index_table defining suffix_table of x_table to be considered\n    :iterates: over all values, in arbitrary order\n    :complexity: :math:`O(2^{len(x_table)-i})`\n    "}, {"name": "part_sum2", "decription": "All subsetsums from a list x\n\n    :param x_table: list of values\n    :complexity: :math:`O(2^{len(x)})`\n    "}, {"name": "subset_sum", "decription": "Subsetsum by splitting\n\n    :param x_table: table of values\n    :param r_target: target value\n    :returns bool: if there is a subsequence of x_table with total sum r_target\n    :complexity: :math:`O(n^{\\lceil n/2 \\rceil})`\n    "}, {"name": "subset_sum2", "decription": "Subsetsum by splitting\n\n    :param x_table: table of values\n    :param r_target: target value\n    :returns bool: if there is a subsequence of x_table with total sum r_target\n    :complexity: :math:`O(n^{\\lceil n/2 \\rceil})`\n    "}], "classes": []}, "FR": {"name": "subsetsum_divide", "description": "Subsetsum par fractionnement\nchristoph d\u00fcrr et jill-j\u00eann vie - 2014-2019\n", "functions": [{"name": "part_sum", "decription": "Tous les subsetsums de x_table[i:]\n\n:param x_table: tableau de valeurs\n:param int i: index_table d\u00e9finition suffix_table de x_table \u00eatre consid\u00e9r\u00e9 comme\n:it\u00e8re: plus de toutes les valeurs, dans un ordre arbitraire\n:complexit\u00e9: :math:`O(2^{len(x_table)-i})`\n"}, {"name": "part_sum2", "decription": "Tous les subsetsums \u00e0 partir d'une liste x\n\n:param x_table: liste de valeurs\n:complexit\u00e9: :math:`O(2^{len(x)})`\n"}, {"name": "subset_sum", "decription": "Subsetsum par fractionnement\n\n:param x_table: tableau de valeurs\n:param r_target: valeur cible\n:renvoie un bool: si il existe une sous-suite de x_table \u00e0 la somme totale r_target\n:complexit\u00e9: :math:`O(n^{\\lceil n/2 \\rceil})`\n"}, {"name": "subset_sum2", "decription": "Subsetsum par fractionnement\n\n:param x_table: tableau de valeurs\n:param r_target: valeur cible\n:renvoie un bool: si il existe une sous-suite de x_table \u00e0 la somme totale r_target\n:complexit\u00e9: :math:`O(n^{\\lceil n/2 \\rceil})`\n"}], "classes": []}}, {"EN": {"name": "rectangles_from_histogram", "description": "Largest Rectangular Area in a Histogram\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "rectangles_from_histogram", "decription": "Largest Rectangular Area in a Histogram\n\n    :param H: histogram table\n    :returns: area, left, height, right, rect. is [0, height] * [left, right)\n    :complexity: linear\n    "}], "classes": []}, "FR": {"name": "rectangles_from_histogram", "description": "Plus grande Zone Rectangulaire dans un Histogramme\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "rectangles_from_histogram", "decription": "Plus grande Zone Rectangulaire dans un Histogramme\n\n:param H: histogramme de la table\n:r\u00e9sultat: domaine, \u00e0 gauche, en hauteur, \u00e0 droite, rect. est [0, hauteur] * [gauche, droite)\n:complexit\u00e9: lin\u00e9aire\n"}], "classes": []}}, {"EN": {"name": "kruskal", "description": "Minimum spanning tree by kruskal\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "dist", "decription": "\n    distance between point a and point b\n    "}, {"name": "kruskal", "decription": "Minimum spanning tree by Kruskal\n\n    :param graph: undirected graph in listlist or listdict format\n    :param weight: in matrix format or same listdict graph\n    :returns: list of edges of the tree\n    :complexity: ``O(|E|log|E|)``\n    "}], "classes": [{"name": "UnionFind", "description": "Maintains a partition of {0, ..., n-1}\n    ", "methods": [{"name": "__init__", "description": null}, {"name": "find", "description": "\n        :returns: identifier of part containing x_index\n        :complex_indexity: O(inverse_ackerman(n))\n        "}, {"name": "union", "description": "\n        Merges part that contain x and part containing y\n        :returns: False if x_index, y_index are already in same part\n        :complexity: O(inverse_ackerman(n))\n        "}]}]}, "FR": {"name": "kruskal", "description": "Minimum spanning tree par kruskal\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "dist", "decription": "\nla distance entre le point a et le point b\n"}, {"name": "kruskal", "decription": "Minimum spanning tree par Kruskal\n\n:param graphe: graphe non-dirig\u00e9 dans listlist ou listdict format\n:param poids: dans un format de matrice ou m\u00eame listdict graphique\n:retourne: liste des bords de l'arbre\n:complexit\u00e9: `O(|E|log|E|)`\n"}], "classes": [{"name": "UnionFind", "description": "Maintient d'une partition de {0, ..., n-1}\n", "methods": [{"name": "__init__", "description": null}, {"name": "trouver", "description": "\n:retourne: identificateur de la partie contenant x_index\n:complex_indexity: O(inverse_ackerman(n))\n"}, {"name": "union", "description": "\nFusionne la partie qui contiennent x et y contenant\n:retourne False si x_index, y_index sont d\u00e9j\u00e0 dans la m\u00eame partie\n:complexit\u00e9: O(inverse_ackerman(n))\n"}]}]}}, {"EN": {"name": "levenshtein", "description": "Levenshtein edit distance\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "levenshtein", "decription": "Levenshtein edit distance\n\n    :param x:\n    :param y: strings\n    :returns: distance\n    :complexity: `O(|x|*|y|)`\n    "}], "classes": []}, "FR": {"name": "levenshtein", "description": "Levenshtein distance d'\u00e9dition\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "levenshtein", "decription": "Levenshtein distance d'\u00e9dition\n\n:param x:\n:param y: les cha\u00eenes de caract\u00e8res\n:retourne: distance\n:complexit\u00e9: O(|x|*|y|)`\n"}], "classes": []}}, {"EN": {"name": "convex_hull", "description": "Convex hull by Andrew\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "andrew", "decription": "Convex hull by Andrew\n\n    :param S: list of points as coordinate pairs\n    :requires: S has at least 2 points\n    :returns: list of points of the convex hull\n    :complexity: `O(n log n)`\n    "}, {"name": "left_turn", "decription": "function left-turn"}], "classes": []}, "FR": {"name": "convex_hull", "description": "L'enveloppe convexe par Andrew\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "andrew", "decription": "L'enveloppe convexe par Andrew\n\n:param S: liste des points de paires de coordonn\u00e9es\n:n\u00e9cessite: S y a au moins 2 points\n:retourne: liste des points de l'enveloppe convexe\n:complexit\u00e9: O(n log n)`\n"}, {"name": "left_turn", "decription": "la fonction de virage \u00e0 gauche"}], "classes": []}}, {"EN": {"name": "kuhn_munkres_n4", "description": "kuhn_munkres_n4\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "improve_labels", "decription": "improve labels"}, {"name": "improve_matching", "decription": "improve matching"}, {"name": "kuhn_munkres", "decription": "Maximum profit perfect matching\n\n    for minimum cost perfect matching just inverse the weights\n\n    :param G: squared weight matrix of a complete bipartite graph\n    :complexity: :math:`O(n^4)`\n    "}], "classes": []}, "FR": {"name": "kuhn_munkres_n4", "description": "kuhn_munkres_n4\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "improve_labels", "decription": "am\u00e9liorer les \u00e9tiquettes"}, {"name": "improve_matching", "decription": "am\u00e9liorer l'ad\u00e9quation entre l'"}, {"name": "kuhn_munkres", "decription": "Le Maximum de profit parfait\n\npour un minimum de co\u00fbt de mise en correspondance parfaite juste \u00e0 l'inverse, le poids\n\n:param G: carr\u00e9 poids de la matrice d'un graphe biparti\n:complexit\u00e9: :math:`O(n^4)`\n"}], "classes": []}}, {"EN": {"name": "our_queue", "description": "A FIFO queue\nchristoph d\u00fcrr - jill-j\u00eann vie - 2015-2019\n", "functions": [], "classes": [{"name": "OurQueue", "description": "A FIFO queue\n\n    Complexity:\n        all operators in amortized constant time,\n        except __str__ which is linear\n    ", "methods": [{"name": "__init__", "description": null}, {"name": "__len__", "description": null}, {"name": "__str__", "description": null}, {"name": "pop", "description": null}, {"name": "push", "description": null}]}]}, "FR": {"name": "our_queue", "description": "Une file d'attente FIFO\nchristoph d\u00fcrr - jill-j\u00eann vie - la p\u00e9riode 2015-2019\n", "functions": [], "classes": [{"name": "OurQueue", "description": "Une file d'attente FIFO\n\nComplexit\u00e9:\ntous les op\u00e9rateurs en temps constant amorti,\nsauf __str__, qui est lin\u00e9aire\n", "methods": [{"name": "__init__", "description": null}, {"name": "__len__", "description": null}, {"name": "__str__", "description": null}, {"name": "pop", "description": null}, {"name": "pousser", "description": null}]}]}}, {"EN": {"name": "lowest_common_ancestor", "description": "Lowest common ancestor\njill-jenn vie et christoph durr - 2014-2018\nhttp://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html\n", "functions": [{"name": "log2ceil", "decription": " log of n in base 2 rounded up "}, {"name": "log2floor", "decription": " log of n in base 2 rounded down "}], "classes": [{"name": "LowestCommonAncestorRMQ", "description": "Lowest common ancestor data structure using a reduction to\n       range minimum query\n    ", "methods": [{"name": "__init__", "description": "builds the structure from a given tree\n\n        :param graph: adjacency matrix of a tree\n        :complexity: O(n log n), with n = len(graph)\n        "}, {"name": "query", "description": ":returns: the lowest common ancestor of u and v\n        :complexity: O(log n)\n        "}]}, {"name": "LowestCommonAncestorShortcuts", "description": "Lowest common ancestor data structure using shortcuts to ancestors\n    ", "methods": [{"name": "__init__", "description": "builds the structure from a given tree\n\n        :param prec: father for every node, with prec[0] = 0\n        :assumes: prec[node] < node\n        :complexity: O(n log n), with n = len(nodes)\n        "}, {"name": "query", "description": ":returns: the lowest common ancestor of u and v\n        :complexity: O(log n)\n        "}]}]}, "FR": {"name": "lowest_common_ancestor", "description": "Plus bas anc\u00eatre commun\njill-jenn vie et christoph durr - 2014-2018\nhttp://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html\n", "functions": [{"name": "log2ceil", "decription": " journal de n en base 2 arrondi "}, {"name": "log2floor", "decription": " journal de n en base 2 arrondi \u00e0 l'inf\u00e9rieur "}], "classes": [{"name": "LowestCommonAncestorRMQ", "description": "Plus bas anc\u00eatre commun \u00e0 la structure de donn\u00e9es \u00e0 l'aide d'une r\u00e9duction de\nle minimum de la plage de la requ\u00eate\n", "methods": [{"name": "__init__", "description": "construit la structure d'un arbre\n\n:param graphique: matrice de contigu\u00eft\u00e9 d'un arbre\n:complexit\u00e9: O(n log n), avec n = len(graphique)\n"}, {"name": "requ\u00eate", "description": ":renvoie: le plus petit anc\u00eatre commun de u et v\n:complexit\u00e9: O(log n)\n"}]}, {"name": "LowestCommonAncestorShortcuts", "description": "Plus bas anc\u00eatre commun \u00e0 la structure de donn\u00e9es \u00e0 l'aide des raccourcis vers des anc\u00eatres\n", "methods": [{"name": "__init__", "description": "construit la structure d'un arbre\n\n:param prec: p\u00e8re, pour chaque n\u0153ud, avec prec[0] = 0\n:suppose: prec[n\u0153ud] < node\n:complexit\u00e9: O(n log n), avec n = len(n\u0153uds)\n"}, {"name": "requ\u00eate", "description": ":renvoie: le plus petit anc\u00eatre commun de u et v\n:complexit\u00e9: O(log n)\n"}]}]}}, {"EN": {"name": "roman_numbers", "description": "Evaluate an arithmetic expression\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "int2roman", "decription": "Code roman number\n\n    :param val: integer between 1 and 9999\n    :returns: the corresponding roman number\n    :complexity: linear (if that makes sense for constant bounded input size)\n    "}, {"name": "roman2int", "decription": "Decode roman number\n\n    :param s: string representing a roman number between 1 and 9999\n    :returns: the decoded roman number\n    :complexity: linear (if that makes sense for constant bounded input size)\n    "}], "classes": []}, "FR": {"name": "roman_numbers", "description": "\u00c9valuer une expression arithm\u00e9tique\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "int2roman", "decription": "Code chiffre romain\n\n:param val: entier compris entre 1 et 9999\n:r\u00e9sultat: le chiffre romain correspondant\n:complexit\u00e9: lin\u00e9aire (si cela fait sens pour constant d\u00e9limit\u00e9e \u00e0 l'entr\u00e9e de la taille)\n"}, {"name": "roman2int", "decription": "D\u00e9coder chiffre romain\n\n:param s: cha\u00eene de caract\u00e8res repr\u00e9sentant un chiffre romain entre 1 et 9999\n:retourne: la d\u00e9cod\u00e9 chiffre romain\n:complexit\u00e9: lin\u00e9aire (si cela fait sens pour constant d\u00e9limit\u00e9e \u00e0 l'entr\u00e9e de la taille)\n"}], "classes": []}}, {"EN": {"name": "majority", "description": "Majority\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [{"name": "majority", "decription": "Majority\n\n    :param L: list of elements\n    :returns: element that appears most in L,\n             tie breaking with smallest element\n    :complexity: :math:`O(nk)` in average,\n                 where n = len(L) and k = max(w for w in L)\n                 :math:`O(n^2k)` in worst case due to the use of a dictionary\n    "}], "classes": []}, "FR": {"name": "la majorit\u00e9", "description": "La majorit\u00e9\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [{"name": "la majorit\u00e9", "decription": "La majorit\u00e9\n\n:param L: liste d'\u00e9l\u00e9ments\n:retourne: \u00e9l\u00e9ment qui appara\u00eet le plus dans L,\nbris d'\u00e9galit\u00e9 avec le plus petit \u00e9l\u00e9ment\n:complexit\u00e9: :math:`O(nk) en moyenne,\no\u00f9 n = len(L) et k = max(w pour w dans L)\n:math:`O(n^2k)` dans le pire des cas en raison de l'utilisation d'un dictionnaire\n"}], "classes": []}}, {"EN": {"name": "dijkstra", "description": "Shortest paths by Dijkstra\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2018\n", "functions": [{"name": "dijkstra", "decription": "single source shortest paths by Dijkstra\n\n       :param graph: directed graph in listlist or listdict format\n       :param weight: in matrix format or same listdict graph\n       :assumes: weights are non-negative\n       :param source: source vertex\n       :type source: int\n       :param target: if given, stops once distance to target found\n       :type target: int\n\n       :returns: distance table, precedence table\n       :complexity: `O(|V| + |E|log|V|)`\n    "}, {"name": "dijkstra_update_heap", "decription": "single source shortest paths by Dijkstra\n       with a heap implementing item updates\n\n       :param graph: adjacency list or adjacency dictionary of a directed graph\n       :param weight: matrix or adjacency dictionary\n       :assumes: weights are non-negatif and weights are infinite for non edges\n       :param source: source vertex\n       :type source: int\n       :param target: if given, stops once distance to target found\n       :type target: int\n       :returns: distance table, precedence table\n       :complexity: `O(|V| + |E|log|V|)`\n    "}], "classes": []}, "FR": {"name": "dijkstra", "description": "Plus courts chemins par Dijkstra\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2018\n", "functions": [{"name": "dijkstra", "decription": "unique source de plus courts chemins par Dijkstra\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param poids: dans un format de matrice ou m\u00eame listdict graphique\n:suppose: les poids sont non-n\u00e9gatives\n:param source: source: vertex\n:type de source: int\n:param cible: si elle est donn\u00e9e, s'arr\u00eate une fois la distance de la cible a\n:type de cible: int\n\n:retourne: distance de table, table de pr\u00e9c\u00e9dence\n:complexit\u00e9: O(|V| + |E|log|V|)`\n"}, {"name": "dijkstra_update_heap", "decription": "unique source de plus courts chemins par Dijkstra\navec un tas de mettre en \u0153uvre les mises \u00e0 jour\n\n:param graphique: liste d'adjacence ou de contigu\u00eft\u00e9 dictionnaire d'un graphe orient\u00e9\n:param poids: matrice ou de contigu\u00eft\u00e9 dictionnaire\n:suppose: les poids sont non-negatif et le poids sont infinies pour non bords\n:param source: source: vertex\n:type de source: int\n:param cible: si elle est donn\u00e9e, s'arr\u00eate une fois la distance de la cible a\n:type de cible: int\n:retourne: distance de table, table de pr\u00e9c\u00e9dence\n:complexit\u00e9: O(|V| + |E|log|V|)`\n"}], "classes": []}}, {"EN": {"name": "ford_fulkerson", "description": "Maximum flow by Ford-Fulkerson\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "_augment", "decription": "Find an augmenting path from u to target with value at most val"}, {"name": "ford_fulkerson", "decription": "Maximum flow by Ford-Fulkerson\n\n    :param graph: directed graph in listlist or listdict format\n    :param capacity: in matrix format or same listdict graph\n    :param int s: source vertex\n    :param int t: target vertex\n\n    :returns: flow matrix, flow value\n    :complexity: `O(|V|*|E|*max_capacity)`\n    "}], "classes": []}, "FR": {"name": "ford_fulkerson", "description": "D\u00e9bit maximal de Ford-Fulkerson\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "_augment", "decription": "Trouver une augmentation de chemin de u \u00e0 la cible avec une valeur au plus val"}, {"name": "ford_fulkerson", "decription": "D\u00e9bit maximal de Ford-Fulkerson\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param capacit\u00e9: dans un format de matrice ou m\u00eame listdict graphique\n:param int s: source: vertex\n:param int t: cible vertex\n\n:retourne: matrice de flux, le flux de valeur\n:complexit\u00e9: O(|V|*|E|*max_capacity)`\n"}], "classes": []}}, {"EN": {"name": "fast_exponentiation", "description": "Fast Exponentiation\njill-jenn vie et christoph durr and louis abraham - 2014-2018\n", "functions": [{"name": "fast_exponentiation", "decription": "Compute (a pow b) % q, alternative shorter implementation\n\n    :param int a b: non negative\n    :param int q: positive\n    :complexity: O(log b)\n    "}, {"name": "fast_exponentiation2", "decription": "Compute (a pow b) % q\n\n    :param int a b: non negative\n    :param int q: positive\n    :complexity: O(log b)\n    "}], "classes": []}, "FR": {"name": "fast_exponentiation", "description": "L'Exponentiation Rapide\njill-jenn vie et christoph durr et louis abraham - 2014-2018\n", "functions": [{"name": "fast_exponentiation", "decription": "Calculer (un pow-b) % q, alternative plus courte de la mise en \u0153uvre\n\n:param int b: non n\u00e9gatif\n:param int q: positif\n:complexit\u00e9: O(log b)\n"}, {"name": "fast_exponentiation2", "decription": "Calculer (un pow-b) % q\n\n:param int b: non n\u00e9gatif\n:param int q: positif\n:complexit\u00e9: O(log b)\n"}], "classes": []}}, {"EN": {"name": "intervals_union", "description": "Union of intervals\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "intervals_union", "decription": "Union of intervals\n\n    :param S: list of pairs (low, high) defining intervals [low, high)\n    :returns: ordered list of disjoint intervals with the same union as S\n    :complexity: O(n log n)\n    "}], "classes": []}, "FR": {"name": "intervals_union", "description": "Union d'intervalles\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "intervals_union", "decription": "Union d'intervalles\n\n:param S: liste de paires (bas, haut) d\u00e9finition des intervalles [low, high)\n:retourne: liste ordonn\u00e9e des intervalles disjoints avec la m\u00eame union que S\n:complexit\u00e9: O(n log n)\n"}], "classes": []}}, {"EN": {"name": "shortest_cycle", "description": "christoph durr, finn voelkel and louis abraham - 2016-2019\n\nFind shortest simple cycle\nO(V*E)\nfootnote (1) here you can add parity check of cycle_len\nif only even cycles are requested\n", "functions": [{"name": "bfs", "decription": "make a pruned BFS search of the graph starting at root.\n    returns the BFS tree, and possibly a traversal edge (u,v)\n    that with the tree forms a cycle of some length.\n\n    :param graph: undirected graph in listlist or listdict format\n    :param root:  vertex where BFS exploration starts\n    :param prune_level: exploration is done only up to\n    the prune_level (included)\n    :complexity: O(V + E)\n    "}, {"name": "path", "decription": "returns the path in the tree from v to the root\n    Complexity: O(V)\n    "}, {"name": "powergraph", "decription": "Compute the k-th\n       `powergraph <https://en.wikipedia.org/wiki/Graph_power>`_\n       which has an edge u,v for every vertex pair\n       of distance at most k in the given graph.\n\n    :param graph: undirected graph in listlist or listdict format\n    :param k: non-negative integer.\n    :complexity: O(V^3)\n    "}, {"name": "readint", "decription": null}, {"name": "readints", "decription": null}, {"name": "readstr", "decription": null}, {"name": "shortest_cycle", "decription": " Finding a shortest cycle in an undirected unweighted graph\n\n    :param graph: undirected graph in listlist or listdict format\n    :returns: None or a list C describing a shortest cycle\n    :complexity: `O(|V|*|E|)`\n    "}], "classes": []}, "FR": {"name": "shortest_cycle", "description": "christoph durr, finn voelkel et louis abraham - 2016-2019\n\nTrouver le plus court cycle simple\nO(V*E)\nnote de bas de page (1) ici, vous pouvez ajouter un contr\u00f4le de parit\u00e9 de cycle_len\nsi seulement, m\u00eame les cycles sont demand\u00e9s\n", "functions": [{"name": "bfs", "decription": "faire un taill\u00e9s BFS recherche du graphe de d\u00e9part \u00e0 la racine.\nrenvoie la SECTION de l'arbre, et, \u00e9ventuellement, une travers\u00e9e de l'ar\u00eate (u,v)\nqu'avec l'arbre forme un cycle d'une certaine longueur.\n\n:param graphe: graphe non-dirig\u00e9 dans listlist ou listdict format\n:param racine: sommet o\u00f9 BFS l'exploration commence\n:param prune_level: l'exploration est le fait que jusqu'\u00e0\nle prune_level (inclus)\n:complexit\u00e9: O(V + E)\n"}, {"name": "chemin", "decription": "retourne le chemin d'acc\u00e8s dans l'arborescence de v \u00e0 la racine\nComplexit\u00e9: O(V)\n"}, {"name": "powergraph", "decription": "Calculer la k-i\u00e8me\n`powergraph <https://en.wikipedia.org/wiki/Graph_power>`_\nqui a un bord u,v pour chaque vertex paire\nde distance au plus k dans le graphe.\n\n:param graphe: graphe non-dirig\u00e9 dans listlist ou listdict format\n:param k: entier non n\u00e9gatif.\n:complexit\u00e9: O(V^3)\n"}, {"name": "readint", "decription": null}, {"name": "readints", "decription": null}, {"name": "readstr", "decription": null}, {"name": "shortest_cycle", "decription": " Trouver un cycle le plus court dans un non orient\u00e9 non pond\u00e9r\u00e9 graphique\n\n:param graphe: graphe non-dirig\u00e9 dans listlist ou listdict format\n:r\u00e9sultat: Aucune ou une liste C d\u00e9crivant un cycle le plus court\n:complexit\u00e9: O(|V|*|E|)`\n"}], "classes": []}}, {"EN": {"name": "interval_cover", "description": "Minimum interval cover\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2018\n", "functions": [{"name": "_readarray", "decription": null}, {"name": "_solve", "decription": null}, {"name": "interval_cover", "decription": "Minimum interval cover\n\n    :param I: list of closed intervals\n    :returns: minimum list of points covering all intervals\n    :complexity: O(n log n)\n    "}], "classes": []}, "FR": {"name": "interval_cover", "description": "Intervalle Minimum de couverture\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2018\n", "functions": [{"name": "_readarray", "decription": null}, {"name": "_solve", "decription": null}, {"name": "interval_cover", "decription": "Intervalle Minimum de couverture\n\n:param I: liste des intervalles ferm\u00e9s\n:retourne: liste minimale de points couvrant tous les intervalles\n:complexit\u00e9: O(n log n)\n"}], "classes": []}}, {"EN": {"name": "graph01", "description": "Shortest path in a 0,1 weighted graph\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "dist01", "decription": "Shortest path in a 0,1 weighted graph\n\n    :param graph: directed graph in listlist or listdict format\n    :param weight: matrix or adjacency dictionary\n    :param int source: vertex\n    :param target: exploration stops once distance to target is found\n    :returns: distance table, predecessor table\n    :complexity: `O(|V|+|E|)`\n    "}], "classes": []}, "FR": {"name": "graph01", "description": "Plus court chemin dans un 0,1 pond\u00e9r\u00e9e graphique\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "dist01", "decription": "Plus court chemin dans un 0,1 pond\u00e9r\u00e9e graphique\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param poids: matrice ou de contigu\u00eft\u00e9 dictionnaire\n:param int source: sommet\n:param cible: l'exploration s'arr\u00eate une fois la distance de la cible est trouv\u00e9e\n:retourne: distance de la table, pr\u00e9d\u00e9cesseur de table\n:complexit\u00e9: O(|V|+|E|)`\n"}], "classes": []}}, {"EN": {"name": "primes", "description": "Prime numbers by Eratosthene\nnombre premiers <n\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "eratosthene", "decription": "Prime numbers by sieve of Eratosthene\n\n    :param n: positive integer\n    :assumes: n > 2\n    :returns: list of prime numbers <n\n    :complexity: O(n loglog n)\n    "}, {"name": "gries_misra", "decription": "Prime numbers by the sieve of Gries-Misra\n    Computes both the list of all prime numbers less than n,\n    and a table mapping every integer 2 \u2264 x < n to its smallest prime factor\n\n    :param n: positive integer\n    :returns: list of prime numbers, and list of prime factors\n    :complexity: O(n)\n    "}], "classes": []}, "FR": {"name": "les nombres premiers", "description": "Nombres premiers par Eratosthene\nnombre des premiers ministres de l' <n\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "eratosthene", "decription": "Le premier nombre par le crible d'Eratosthene\n\n:param n: entier positif\n:suppose: n > 2\n:renvoie la liste des nombres premiers <n\n:complexit\u00e9: O(n loglog n)\n"}, {"name": "gries_misra", "decription": "Le premier nombre par le tamis de Gries-Misra\nCalcule \u00e0 la fois la liste de tous les nombres premiers inf\u00e9rieurs \u00e0 n,\net une table de mappage de chaque nombre entier 2 \u2264 x < n \u00e0 son plus petit facteur premier\n\n:param n: entier positif\n:renvoie la liste des nombres premiers, et la liste des facteurs premiers\n:complexit\u00e9: O(n)\n"}], "classes": []}}, {"EN": {"name": "binary_search", "description": "Binary search\njill-j\u00eann vie, christoph d\u00fcrr et louis abraham - 2014-2019\n", "functions": [{"name": "_readarray", "decription": null}, {"name": "_readint", "decription": null}, {"name": "continuous_binary_search", "decription": "Binary search for a function\n\n    :param f: boolean monotone function with f(hi) = True\n    :param int lo:\n    :param int hi: with hi >= lo\n    :param float gap:\n    :returns: first value x in [lo,hi] such that f(x),\n             x is computed up to some precision\n    :complexity: `O(log((hi-lo)/gap))`\n    "}, {"name": "discrete_binary_search", "decription": "Binary search in a table\n\n    :param tab: boolean monotone table with tab[hi] = True\n    :param int lo:\n    :param int hi: with hi >= lo\n    :returns: first index i in [lo,hi] such that tab[i]\n    :complexity: `O(log(hi-lo))`\n    "}, {"name": "optimized_binary_search", "decription": "Binary search in a table using bit operations\n\n    :param tab: boolean monotone table\n       of size :math:`2^\\textrm{logsize}`\n       with tab[hi] = True\n    :param int logsize:\n    :returns: first i such that tab[i]\n    :complexity: O(logsize)\n    "}, {"name": "optimized_binary_search_lower", "decription": "Binary search in a table using bit operations\n\n    :param tab: boolean monotone table\n       of size :math:`2^\\textrm{logsize}`\n       with tab[0] = False\n    :param int logsize:\n    :returns: last i such that not tab[i]\n    :complexity: O(logsize)\n    "}, {"name": "ternary_search", "decription": "Ternary maximum search for a bitonic function\n\n    :param f: boolean bitonic function (increasing then decreasing,\n    not necessarily strictly)\n    :param int lo:\n    :param int hi: with hi >= lo\n    :param float gap:\n    :returns: value x in [lo,hi] maximizing f(x),\n             x is computed up to some precision\n    :complexity: `O(log((hi-lo)/gap))`\n    "}], "classes": []}, "FR": {"name": "binary_search", "description": "Recherche binaire\njill-j\u00eann vie, christoph d\u00fcrr et louis abraham - 2014-2019\n", "functions": [{"name": "_readarray", "decription": null}, {"name": "_readint", "decription": null}, {"name": "continuous_binary_search", "decription": "Recherche binaire pour une fonction\n\n:param f: boolean la monotonie de la fonction f(hi) = Vrai\n:param int lo:\n:param int hi: hi >= lo\n:param float \u00e9cart:\n:renvoie: la premi\u00e8re valeur de x dans [lo,hi] tel que f(x),\nx est calcul\u00e9e jusqu'\u00e0 un certain degr\u00e9 de pr\u00e9cision\n:complexit\u00e9: O(log((hi-lo)/gap))`\n"}, {"name": "discrete_binary_search", "decription": "Recherche binaire dans un tableau\n\n:param onglet: boolean monotone de la table avec l'onglet[hi] = True\n:param int lo:\n:param int hi: hi >= lo\n:retourne: premier indice i dans [lo,hi] tel que tab[i]\n:complexit\u00e9: O(log(hi-lo))`\n"}, {"name": "optimized_binary_search", "decription": "Recherche binaire dans un tableau en utilisant les op\u00e9rations sur les bits\n\n:param onglet: boolean monotone table\nde taille :math:`2^\\textrm{logsize}`\navec l'onglet[hi] = True\n:param int taille de log:\n:r\u00e9sultat: j'ai d'abord tel que tab[i]\n:complexit\u00e9: O(taille de log)\n"}, {"name": "optimized_binary_search_lower", "decription": "Recherche binaire dans un tableau en utilisant les op\u00e9rations sur les bits\n\n:param onglet: boolean monotone table\nde taille :math:`2^\\textrm{logsize}`\navec tab[0] = False\n:param int taille de log:\n:retourne: le dernier que j'ai qui ne tab[i]\n:complexit\u00e9: O(taille de log)\n"}, {"name": "ternary_search", "decription": "Ternaire de recherche maximale pour un bitonic fonction\n\n:param f: boolean bitonic fonction (croissante puis d\u00e9croissante,\npas n\u00e9cessairement strictement)\n:param int lo:\n:param int hi: hi >= lo\n:param float \u00e9cart:\n:retourne: une valeur x dans [lo,hi] maximiser f(x),\nx est calcul\u00e9e jusqu'\u00e0 un certain degr\u00e9 de pr\u00e9cision\n:complexit\u00e9: O(log((hi-lo)/gap))`\n"}], "classes": []}}, {"EN": {"name": "knuth_morris_pratt", "description": "Find the length of maximal borders by Knuth-Morris-Pratt\n\njill-j\u00eann vie, christoph d\u00fcrr et louis abraham - 2014-2019\ninspired from a practical lesson (TP) from Yves Lemaire\n", "functions": [{"name": "knuth_morris_pratt", "decription": "Find a substring by Knuth-Morris-Pratt\n\n    :param s: the haystack string\n    :param t: the needle string\n    :returns: index i such that s[i: i + len(t)] == t, or -1\n    :complexity: O(len(s) + len(t))\n    "}, {"name": "maximum_border_length", "decription": "Maximum string borders by Knuth-Morris-Pratt\n\n    :param w: string\n    :returns: table f such that f[i] is the longest border length of w[:i + 1]\n    :complexity: linear\n    "}, {"name": "powerstring_by_border", "decription": "Power string by Knuth-Morris-Pratt\n\n    :param x: string\n    :returns: largest k such that there is a string y with x = y^k\n    :complexity: O(len(x))\n    "}, {"name": "powerstring_by_find", "decription": "Power string using the python find method\n\n    :param x: string\n    :returns: largest k such that there is a string y with x = y^k\n    :complexity: O(len(x))\n    "}], "classes": []}, "FR": {"name": "knuth_morris_pratt", "description": "Trouver la longueur maximale de fronti\u00e8res par Knuth-Morris-Pratt\n\njill-j\u00eann vie, christoph d\u00fcrr et louis abraham - 2014-2019\ninspir\u00e9 d'une le\u00e7on pratique (TP) d'Yves Lemaire\n", "functions": [{"name": "knuth_morris_pratt", "decription": "Rechercher une sous-cha\u00eene par Knuth-Morris-Pratt\n\n:param s: la botte de foin de la cha\u00eene\n:param t: l'aiguille de la cha\u00eene\n:retourne: indice i tel que s[i: i + len(t)] == t, ou -1\n:complexit\u00e9: O(len(s) + len(t))\n"}, {"name": "maximum_border_length", "decription": "Maximale de la cha\u00eene fronti\u00e8res par Knuth-Morris-Pratt\n\n:param w: string\n:retourne: tableau f tel que f[i] est la plus longue fronti\u00e8re de la longueur de w[:i + 1]\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "powerstring_by_border", "decription": "La puissance de la cha\u00eene par Knuth-Morris-Pratt\n\n:param x: string\n:renvoie: le plus grand k tel qu'il existe une cha\u00eene de y avec x = y^k\n:complexit\u00e9: O(len(x))\n"}, {"name": "powerstring_by_find", "decription": "Puissance de cha\u00eene \u00e0 l'aide de python m\u00e9thode find\n\n:param x: string\n:renvoie: le plus grand k tel qu'il existe une cha\u00eene de y avec x = y^k\n:complexit\u00e9: O(len(x))\n"}], "classes": []}}, {"EN": {"name": "dinic", "description": "Maximum flow by Dinic\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2018\n", "functions": [{"name": "_dinic_step", "decription": " tenter de pousser le plus de flot de u \u00e0 target, sans d\u00e9passer limit\n    "}, {"name": "dinic", "decription": "Maximum flow by Dinic\n\n    :param graph: directed graph in listlist or listdict format\n    :param capacity: in matrix format or same listdict graph\n    :param int source: vertex\n    :param int target: vertex\n    :returns: skew symmetric flow matrix, flow value\n    :complexity: :math:`O(|V|^2 |E|)`\n    "}], "classes": []}, "FR": {"name": "dinic", "description": "D\u00e9bit maximal par Dinic\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2018\n", "functions": [{"name": "_dinic_step", "decription": " tentrer de pousser le plus de flot de u \u00e0 la cible, sans d\u00e9passer la limite de\n"}, {"name": "dinic", "decription": "D\u00e9bit maximal par Dinic\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param capacit\u00e9: dans un format de matrice ou m\u00eame listdict graphique\n:param int source: sommet\n:param int cible: sommet\n:retourne: inclinaison sym\u00e9trique de la matrice de flux, le flux de valeur\n:complexit\u00e9: :math:`O(|V|^2 |E|)`\n"}], "classes": []}}, {"EN": {"name": "predictive_text", "description": "Predictive text for mobile phones\njill-jenn vie et christoph durr and louis abraham - 2014-2019\n", "functions": [{"name": "code_word", "decription": ":returns: the digit correspondence for given word"}, {"name": "letter_to_digit", "decription": ":returns: the digit correspondence for letter x"}, {"name": "predictive_text", "decription": "Predictive text for mobile phones\n\n    :param dic: associates weights to words from [a-z]*\n    :returns: a dictionary associating to words from [2-9]*\n             a corresponding word from the dictionary with highest weight\n    :complexity: linear in total word length\n    "}, {"name": "propose", "decription": "wrapper to access a dictionary even for non-present keys"}], "classes": []}, "FR": {"name": "predictive_text", "description": "La saisie de texte pr\u00e9dictive pour les t\u00e9l\u00e9phones mobiles\njill-jenn vie et christoph durr et louis abraham - 2014-2019\n", "functions": [{"name": "code_word", "decription": ":r\u00e9sultat: le chiffre de la correspondance mot donn\u00e9"}, {"name": "letter_to_digit", "decription": ":r\u00e9sultat: le chiffre de la correspondance pour la lettre x"}, {"name": "predictive_text", "decription": "La saisie de texte pr\u00e9dictive pour les t\u00e9l\u00e9phones mobiles\n\n:param dic: les associ\u00e9s poids aux mots de [a-z]*\n:retourne: un dictionnaire associant \u00e0 des mots \u00e0 partir de [2-9]*\nun mot correspondant dans le dictionnaire avec plus de poids\n:complexit\u00e9: lin\u00e9aire total de la longueur des mots\n"}, {"name": "proposer", "decription": "wrapper pour acc\u00e9der \u00e0 un dictionnaire, m\u00eame pour les non-pr\u00e9sent cl\u00e9s"}], "classes": []}}, {"EN": {"name": "closest_values", "description": "Closest values\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "closest_values", "decription": "Closest values\n\n    :param L: list of values\n    :returns: two values from L with minimal distance\n    :modifies: the order of L\n    :complexity: O(n log n), for n=len(L)\n    "}], "classes": []}, "FR": {"name": "closest_values", "description": "Plus proche des valeurs\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "closest_values", "decription": "Plus proche des valeurs\n\n:param L: liste de valeurs\n:r\u00e9sultat: deux valeurs de L avec la distance minimale\n:modifie: de l'ordre de L\n:complexit\u00e9: O(n log n), pour n=len(L)\n"}], "classes": []}}, {"EN": {"name": "eulerian_tour", "description": "Eulerian cycle\njill-jenn vie et christoph durr - 2015-2018\n", "functions": [{"name": "eulerian_tour_directed", "decription": "Eulerian tour on a directed graph\n\n       :param graph: directed graph in listlist format, cannot be listdict\n       :assumes: graph is eulerian\n       :returns: eulerian cycle as a vertex list\n       :complexity: `O(|V|+|E|)`\n    "}, {"name": "eulerian_tour_undirected", "decription": "Eulerian tour on an undirected graph\n\n       :param graph: directed graph in listlist format, cannot be listdict\n       :assumes: graph is eulerian\n       :returns: eulerian cycle as a vertex list\n       :complexity: `O(|V|+|E|)`\n    "}, {"name": "is_eulerian_tour", "decription": "Eulerian tour on an undirected graph\n\n       :param graph: directed graph in listlist format, cannot be listdict\n       :param tour: vertex list\n       :returns: test if tour is eulerian\n       :complexity: `O(|V|*|E|)` under the assumption that\n       set membership is in constant time\n    "}, {"name": "random_eulerien_graph", "decription": "Generates some random eulerian graph\n\n       :param int n: number of vertices\n       :returns: undirected graph in listlist representation\n       :complexity: linear\n    "}, {"name": "write_cycle", "decription": "Write an eulerian tour in DOT format\n\n       :param filename: the file to be written in DOT format\n       :param graph: graph in listlist format, cannot be listdict\n       :param bool directed: describes the graph\n       :param cycle: tour as a vertex list\n       :returns: nothing\n       :complexity: `O(|V|^2 + |E|)`\n    "}], "classes": []}, "FR": {"name": "eulerian_tour", "description": "Cycle eul\u00e9rien\njill-jenn vie et christoph durr - 2015-2018\n", "functions": [{"name": "eulerian_tour_directed", "decription": "Eul\u00e9rien tour sur un graphe orient\u00e9\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:suppose: graphe est eul\u00e9rien\n:retourne: cycle eul\u00e9rien comme un sommet de la liste\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "eulerian_tour_undirected", "decription": "Eul\u00e9rien tour sur un graphe non-dirig\u00e9\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:suppose: graphe est eul\u00e9rien\n:retourne: cycle eul\u00e9rien comme un sommet de la liste\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "is_eulerian_tour", "decription": "Eul\u00e9rien tour sur un graphe non-dirig\u00e9\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:param tour: sommet de la liste\n:retourne: tester si la tour est eul\u00e9rien\n:complexit\u00e9: O(|V|*|E|)\", sous l'hypoth\u00e8se que\nl'appartenance est en temps constant\n"}, {"name": "random_eulerien_graph", "decription": "G\u00e9n\u00e8re un hasard graphe eul\u00e9rien\n\n:param int n: nombre de sommets\n:retourne: graphes non orient\u00e9s dans listlist repr\u00e9sentation\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "write_cycle", "decription": "\u00c9crire un eul\u00e9rien tour DOT format\n\n:param filename: le fichier sera \u00e9crit en DOT format\n:param graphique: graphique en listlist format, ne peut pas \u00eatre listdict\n:param bool dirig\u00e9: d\u00e9crit le graphe\n:param cycle: tour comme un sommet de la liste\n:retourne: rien du tout\n:complexit\u00e9: O(|V|^2 + |E|)`\n"}], "classes": []}}, {"EN": {"name": "strongly_connected_components", "description": "Strongly connected components\ncomposantes fortement connexes\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2018\n", "functions": [{"name": "kosaraju", "decription": "Strongly connected components by Kosaraju\n\n    :param graph: directed graph in listlist format, cannot be listdict\n    :returns: list of lists for each component\n    :complexity: linear\n    "}, {"name": "kosaraju_dfs", "decription": "\n    kosaraju depth-first-search over graph\n    "}, {"name": "reverse", "decription": "replace all arcs (u, v) by arcs (v, u) in a graph"}, {"name": "tarjan", "decription": "Strongly connected components by Tarjan, iterative implementation\n\n    :param graph: directed graph in listlist format, cannot be listdict\n    :returns: list of lists for each component\n    :complexity: linear\n    "}, {"name": "tarjan_recursif", "decription": "Strongly connected components by Tarjan, recursive implementation\n\n    :param graph: directed graph in listlist format, cannot be listdict\n    :returns: list of lists for each component\n    :complexity: linear\n    "}], "classes": []}, "FR": {"name": "strongly_connected_components", "description": "Vivement les composants connect\u00e9s\ncomposantes fortement connexes\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2018\n", "functions": [{"name": "kosaraju", "decription": "Vivement les composants raccord\u00e9s par Kosaraju\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:retourne: liste de listes pour chaque composant\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "kosaraju_dfs", "decription": "\nkosaraju la profondeur de la premi\u00e8re recherche sur le graphique\n"}, {"name": "inverse", "decription": "remplacer tous les arcs (u, v) par des arcs (v, u) dans un graphique"}, {"name": "tarjan", "decription": "Vivement les composants raccord\u00e9s par Tarjan, it\u00e9ratif de mise en \u0153uvre\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:retourne: liste de listes pour chaque composant\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "tarjan_recursif", "decription": "Vivement les composants raccord\u00e9s par Tarjan, r\u00e9cursive de la mise en \u0153uvre\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:retourne: liste de listes pour chaque composant\n:complexit\u00e9: lin\u00e9aire\n"}], "classes": []}}, {"EN": {"name": "our_heap", "description": "A min heap\nchristoph d\u00fcrr et jill-j\u00eann vie - 2015-2019\n", "functions": [], "classes": [{"name": "OurHeap", "description": " min heap\n\n    * heap: is the actual heap, heap[1] = index of the smallest element\n    * rank: inverse of heap with rank[x]=i iff heap[i]=x\n    * n: size of the heap\n\n    :complexity: init O(n log n), len O(1),\n                other operations O(log n) in expectation\n                and O(n) in worst case, due to the usage of a dictionary\n    ", "methods": [{"name": "__init__", "description": null}, {"name": "__len__", "description": null}, {"name": "down", "description": "the value of heap[i] has increased. Maintain heap invariant."}, {"name": "pop", "description": "Remove and return smallest element"}, {"name": "push", "description": "Insert new element x in the heap.\n           Assumption: x is not already in the heap"}, {"name": "up", "description": "The value of heap[i] has decreased. Maintain heap invariant."}, {"name": "update", "description": "Replace an element in the heap\n        "}]}]}, "FR": {"name": "our_heap", "description": "Un tas min\nchristoph d\u00fcrr et jill-j\u00eann vie - la p\u00e9riode 2015-2019\n", "functions": [], "classes": [{"name": "OurHeap", "description": " min tas\n\n* segment: le tas, tas[1] = indice du plus petit \u00e9l\u00e9ment\n* rang: l'inverse de tas avec le rang[x]=i iff tas[i]=x\n* n: taille de la heap\n\n:complexit\u00e9: init O(n log n), len O(1),\nd'autres op\u00e9rations en O(log n) dans l'attente\net O(n) dans le pire des cas, en raison de l'utilisation d'un dictionnaire\n", "methods": [{"name": "__init__", "description": null}, {"name": "__len__", "description": null}, {"name": "en bas", "description": "la valeur des tas[i] a augment\u00e9. Maintenir tas invariant."}, {"name": "pop", "description": "Retirer et de retourner le plus petit \u00e9l\u00e9ment"}, {"name": "pousser", "description": "Ins\u00e9rer un nouvel \u00e9l\u00e9ment x dans le tas.\nHypoth\u00e8se: x n'est pas d\u00e9j\u00e0 dans le tas"}, {"name": "jusqu'", "description": "La valeur des tas[i] a diminu\u00e9. Maintenir tas invariant."}, {"name": "mise \u00e0 jour", "description": "Remplacer un \u00e9l\u00e9ment dans le tas\n"}]}]}}, {"EN": {"name": "matrix_chain_mult", "description": "Matrix chain multiplication\nmultiplication de matrices\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "_apply_order", "decription": null}, {"name": "matrix_chain_mult", "decription": "Matrix chain multiplication\n\n    :param M: list of matrices\n    :returns: M[0] * ... * M[-1], computed in time optimal order\n    :complexity: whatever is needed by the multiplications\n    "}, {"name": "matrix_mult_opt_order", "decription": "Matrix chain multiplication optimal order\n\n    :param M: list of matrices\n    :returns: matrices opt, arg, such that opt[i][j] is the optimal number of\n              operations to compute M[i] * ... * M[j] when done in the order\n              (M[i] * ... * M[k]) * (M[k + 1] * ... * M[j]) for k = arg[i][j]\n    :complexity: :math:`O(n^2)`\n    "}], "classes": []}, "FR": {"name": "matrix_chain_mult", "description": "La matrice de la cha\u00eene de multiplication\nla multiplication de matrices\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "_apply_order", "decription": null}, {"name": "matrix_chain_mult", "decription": "La matrice de la cha\u00eene de multiplication\n\n:param M: la liste de matrices\n:retourne: M[0] * ... * M[-1], calcul\u00e9e en temps d'ordre optimal\n:complexit\u00e9: tout ce qui est n\u00e9cessaire par la multiplication\n"}, {"name": "matrix_mult_opt_order", "decription": "La matrice de la cha\u00eene d'multiplication ordre optimal\n\n:param M: la liste de matrices\n:retourne: matrices opt, arg, tels que opt[i][j] est le nombre optimal de\nop\u00e9rations pour calculer M[i] * ... * M[j] lorsqu'il est effectu\u00e9 dans l'ordre\n(M[i] * ... * M[k]) * (M[k + 1] * ... * M[j]) pour k = arg[i][j]\n:complexit\u00e9: :math:`O(n^2)`\n"}], "classes": []}}, {"EN": {"name": "horn_sat", "description": "Solving Horn SAT\n\nchristoph d\u00fcrr - 2016-2019\n\nclauses are numbered starting from 0\nvariables are strings (identifier)\n\nsolution  : set of variables that are set to true\nposvar_in_clause : maps clause to the unique positive variable in clause\n(or None)\nclause_with_negvar : maps variable v to all clauses that contain not(v)\n\nevery clause has a score: number of its negative variables\nthat are not in solution sol\npool : maps score to clauses of that score\n", "functions": [{"name": "horn_sat", "decription": " Solving a HORN Sat formula\n\n    :param formula: list of couple(posvar, negvars).\n                    negvars is a list of the negative variables (can be empty)\n                    posvar is the positive variable (can be None)\n                    Variables can be any hashable objects: integers, strings...\n    :returns: None if formula is not satisfiable, else a minimal set of vars\n              that have to be set to true in order to satisfy the formula.\n    :complexity: linear\n    "}, {"name": "read", "decription": " reads a Horn SAT formula from a text file\n\n    :file format:\n        # comment\n        A     # clause with unique positive literal\n        :- A  # clause with unique negative literal\n        A :- B, C, D # clause where A is positive and B,C,D negative\n        # variables are strings without spaces\n    "}], "classes": []}, "FR": {"name": "horn_sat", "description": "La r\u00e9solution de la Corne SAT\n\nchristoph d\u00fcrr - 2016-2019\n\nles clauses sont num\u00e9rot\u00e9s \u00e0 partir de 0\nles variables sont des cha\u00eenes de caract\u00e8res (identificateur)\n\nsolution : ensemble de variables qui sont d\u00e9finies sur true\nposvar_in_clause : cartes clause positive unique variable dans la clause\n(ou Aucun)\nclause_with_negvar : cartes variable v \u00e0 toutes les clauses qui en contiennent pas(v)\n\nchaque clause a un score: nombre de ses n\u00e9gatifs variables\nqui ne sont pas dans la solution de sol\npiscine : les cartes de score pour les clauses de ce score\n", "functions": [{"name": "horn_sat", "decription": " La r\u00e9solution d'une CORNE Sat formule\n\n:param formule: liste de couple(posvar, negvars).\nnegvars est une liste des n\u00e9gatifs variables (peut \u00eatre vide)\nposvar est le positif de la variable (peut-\u00eatre Aucun)\nLes Variables peuvent \u00eatre tout hashable objets: les entiers, les cha\u00eenes de...\n:r\u00e9sultat: Aucun si la formule n'est pas satisfaisante, sinon un ensemble minimal de vars\nqui doivent \u00eatre mis \u00e0 true afin de satisfaire \u00e0 la formule.\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "lire", "decription": " lit une Corne SAT formule \u00e0 partir d'un fichier texte\n\nformat de fichier :\n# commentaire\nUn # clause positive unique litt\u00e9rale\n:- Un # clause unique litt\u00e9ral n\u00e9gatif\nA :- B, C, D # clause o\u00f9 A est positif et B,C,D n\u00e9gatif\n# les variables sont des cha\u00eenes de caract\u00e8res sans les espaces\n"}], "classes": []}}, {"EN": {"name": "three_partition", "description": "subsetsum\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "three_partition", "decription": "partition a set of integers in 3 parts of same total value\n\n    :param x: table of non negative values\n    :returns: triplet of the integers encoding the sets, or None otherwise\n    :complexity: :math:`O(2^{2n})`\n    "}], "classes": []}, "FR": {"name": "three_partition", "description": "subsetsum\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "three_partition", "decription": "partition d'un ensemble d'entiers dans 3 pi\u00e8ces de m\u00eame valeur\n\n:param x: tableau des non valeurs n\u00e9gatives\n:retourne: triplet de nombres entiers codage des ensembles, ou nul sinon\n:complexit\u00e9: :math:`O(2^{2n})`\n"}], "classes": []}}, {"EN": {"name": "gale_shapley", "description": "Stable matching by Gale-Shapley\njill-j\u00eann vie et christoph durr - 2014-2019\n", "functions": [{"name": "gale_shapley", "decription": "Stable matching by Gale-Shapley\n\n    :param men: table of size n, men[i] is preference list of women for men i\n    :param women: similar\n    :returns: matching table, from women to men\n    :complexity: :math:`O(n^2)`\n    "}], "classes": []}, "FR": {"name": "gale_shapley", "description": "Stable correspondant par Gale-Shapley\njill-j\u00eann vie et christoph durr - 2014-2019\n", "functions": [{"name": "gale_shapley", "decription": "Stable correspondant par Gale-Shapley\n\n:param hommes: le tableau de taille n, les hommes[i] est la liste de pr\u00e9f\u00e9rence des femmes pour les hommes, je\n:param femmes: similaires\n:retourne: table de correspondance, de femmes et d'hommes\n:complexit\u00e9: :math:`O(n^2)`\n"}], "classes": []}}, {"EN": {"name": "dilworth", "description": "Decompose DAG into a minimum number of chains\njill-jenn vie et christoph durr - 2015-2018\n", "functions": [{"name": "dilworth", "decription": "Decompose a DAG into a minimum number of chains by Dilworth\n\n    :param graph: directed graph in listlist or listdict format\n    :assumes: graph is acyclic\n    :returns: table giving for each vertex the number of its chains\n    :complexity: same as matching\n    "}], "classes": []}, "FR": {"name": "dilworth", "description": "D\u00e9composer DAG en un nombre minimum de cha\u00eenes\njill-jenn vie et christoph durr - 2015-2018\n", "functions": [{"name": "dilworth", "decription": "D\u00e9composer un DAG en un nombre minimum de cha\u00eenes par Dilworth\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:suppose: graphe est acyclique\n:retourne: tableau donnant pour chaque sommet le nombre de ses cha\u00eenes\n:complexit\u00e9: le m\u00eame en respectant\n"}], "classes": []}}, {"EN": {"name": "longest_increasing_subsequence", "description": "Longest increasing subsequence\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "longest_increasing_subsequence", "decription": "Longest increasing subsequence\n\n    :param x: sequence\n    :returns: longest strictly increasing subsequence y\n    :complexity: `O(|x|*log(|y|))`\n    "}], "classes": []}, "FR": {"name": "longest_increasing_subsequence", "description": "Plus longue sous-suite croissante\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "longest_increasing_subsequence", "decription": "Plus longue sous-suite croissante\n\n:param x: s\u00e9quence\n:retourne: la plus longue sous-suite strictement croissante y\n:complexit\u00e9: O(|x|*log(|y|))`\n"}], "classes": []}}, {"EN": {"name": "graph", "description": "Reading graphs from files and writing into files\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "add_reverse_arcs", "decription": "Utility function for flow algorithms that need for every arc (u,v),\n    the existence of an (v,u) arc, by default with zero capacity.\n    graph can be in adjacency list, possibly with capacity matrix capac.\n    or graph can be in adjacency dictionary, then capac parameter is ignored.\n\n    :param capac: arc capacity matrix\n    :param graph: in listlist representation, or in listdict representation,\n    in this case capac is ignored\n    :complexity: linear\n    :returns: nothing, but graph is modified\n    "}, {"name": "dictdict_to_listdict", "decription": "Transforms a dict-dict graph representation into a\n    adjacency dictionary representation (list-dict)\n\n    :param dictgraph: dictionary mapping vertices to dictionary\n           such that dictgraph[u][v] is weight of arc (u,v)\n    :complexity: linear\n    :returns: tuple with graph (listdict), name_to_node (dict),\n    node_to_name (list)\n    "}, {"name": "extract_path", "decription": "extracts a path in form of vertex list from source to vertex v\n       given a precedence table prec leading to the source\n\n    :param prec: precedence table of a tree\n    :param v: vertex on the tree\n    :returns: path from root to v, in form of a list\n    :complexity: linear\n    "}, {"name": "listdict_to_listlist_and_matrix", "decription": "Transforms the adjacency list representation of a graph\n    of type listdict into the listlist + weight matrix representation\n\n    :param sparse: graph in listdict representation\n    :returns: couple with listlist representation, and weight matrix\n    :complexity: linear\n    "}, {"name": "listlist_and_matrix_to_listdict", "decription": "Transforms the weighted adjacency list representation of a graph\n    of type listlist + optional weight matrix\n    into the listdict representation\n\n    :param graph: in listlist representation\n    :param weight: optional weight matrix\n    :returns: graph in listdict representation\n    :complexity: linear\n    "}, {"name": "make_flow_labels", "decription": "Generate arc labels for a flow in a graph with capacities.\n\n    :param graph: adjacency list or adjacency dictionary\n    :param flow:  flow matrix or adjacency dictionary\n    :param capac: capacity matrix or adjacency dictionary\n    :returns: listdic graph representation, with the arc label strings\n    "}, {"name": "matrix_to_listlist", "decription": "transforms a squared weight matrix in a adjacency table of type listlist\n    encoding the directed graph corresponding to the entries of the matrix\n    different from None\n\n    :param weight: squared weight matrix, weight[u][v] != None iff arc (u, v)\n    exists\n    :complexity: linear\n    :returns: the unweighted directed graph in the listlist representation,\n                       listlist[u] contains all v for which arc (u,v) exists.\n    "}, {"name": "read_graph", "decription": "Read a graph from a text file\n\n    :param filename: plain text file. All numbers are separated by space.\n              Starts with a line containing n (#vertices) and m (#edges).\n              Then m lines follow, for each edge.\n              Vertices are numbered from 0 to n-1.\n              Line for unweighted edge u,v contains two integers u, v.\n              Line for weighted edge u,v contains three integers u, v, w[u,v].\n\n    :param directed: true for a directed graph, false for undirected\n    :param weighted: true for an edge weighted graph\n    :returns: graph in listlist format, possibly followed by weight matrix\n    :complexity: O(n + m) for unweighted graph,\n                 :math:`O(n^2)` for weighted graph\n    "}, {"name": "readtab", "decription": "Reads a line from file with a space separated list\n       of items of type ty\n\n    :param file: input stream, for example sys.stdin\n    :param ty: a type, for example int\n    :returns: a tuple with elements of type ty\n    "}, {"name": "readval", "decription": "Reads a line from file with an item of type ty\n\n    :param file: input stream, for example sys.stdin\n    :param ty: a type, for example int\n    :returns: an element of type ty\n    "}, {"name": "tree_adj_to_prec", "decription": "Transforms a tree given as adjacency list into predecessor table form.\n    if graph is not a tree: will return a DFS spanning tree\n\n    :param graph: directed graph in listlist or listdict format\n    :returns: tree in predecessor table representation\n    :complexity: linear\n    "}, {"name": "tree_prec_to_adj", "decription": "Transforms a tree given as predecessor table into adjacency list form\n\n    :param prec: predecessor table representing a tree, prec[u] == v iff u is\n    successor of v,\n                 except for the root where prec[root] == root\n    :param root: root vertex of the tree\n    :returns: undirected graph in listlist representation\n    :complexity: linear\n    "}, {"name": "write_graph", "decription": "Writes a graph to a file in the DOT format\n\n    :param dotfile: the filename.\n    :param graph: directed graph in listlist or listdict format\n    :param directed: true if graph is directed, false if undirected\n    :param weight: in matrix format or same listdict graph or None\n    :param node_label: vertex label table or None\n    :param arc_label: arc label matrix or None\n    :param comment: comment string for the dot file or None\n    :param node_mark: set of nodes to be shown in gray\n    :param arc_marc: set of arcs to be shown in red\n    :complexity: `O(|V| + |E|)`\n    "}], "classes": [{"name": "Graph", "description": null, "methods": [{"name": "__getitem__", "description": null}, {"name": "__init__", "description": null}, {"name": "__len__", "description": null}, {"name": "add_arc", "description": null}, {"name": "add_edge", "description": null}, {"name": "add_node", "description": null}]}]}, "FR": {"name": "graphique", "description": "La lecture des graphiques \u00e0 partir de fichiers et de l'\u00e9criture dans les fichiers\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "add_reverse_arcs", "decription": "La fonction d'utilit\u00e9 pour l'\u00e9coulement des algorithmes de n\u00e9cessit\u00e9, pour chaque arc (u,v),\nl'existence d'un (v,u) de l'arc, par d\u00e9faut \u00e0 z\u00e9ro de la capacit\u00e9.\nle graphique peut \u00eatre dans la liste d'adjacence, \u00e9ventuellement avec la capacit\u00e9 de la matrice de la capac.\nou graphique peut \u00eatre dans la contigu\u00eft\u00e9 dictionnaire, puis capac param\u00e8tre est ignor\u00e9.\n\n:param capac: arc de la capacit\u00e9 de la matrice\n:param graphique: listlist repr\u00e9sentation, ou dans listdict repr\u00e9sentation,\ndans ce cas, la capac est ignor\u00e9\n:complexit\u00e9: lin\u00e9aire\n:retourne: rien du tout, mais le graphique est modifi\u00e9\n"}, {"name": "dictdict_to_listdict", "decription": "Transforme un dict-dict repr\u00e9sentation graphique dans un\nla contigu\u00eft\u00e9 dictionnaire de la repr\u00e9sentation (liste-dict)\n\n:param dictgraph: dictionnaire de la cartographie des sommets de dictionnaire\ntels que dictgraph[u][v] est le poids de l'arc (u,v)\n:complexit\u00e9: lin\u00e9aire\n:retourne: tuple avec le graphique (listdict), name_to_node (dict),\nnode_to_name (liste)\n"}, {"name": "extract_path", "decription": "extraits d'un chemin en forme de sommet de la liste de la source au sommet v\n\u00e9tant donn\u00e9 un tableau de pr\u00e9c\u00e9dence prec menant \u00e0 la source\n\n:param prec: tableau de pr\u00e9c\u00e9dence d'un arbre\n:param v: sommet sur l'arbre\n:retourne: chemin de la racine \u00e0 la v, sous la forme d'une liste\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "listdict_to_listlist_and_matrix", "decription": "Transforme la repr\u00e9sentation des listes d'adjacence d'un graphe\nde type listdict dans le listlist + poids de la matrice de la repr\u00e9sentation\n\n:param \u00e9parses: graphique de la repr\u00e9sentation listdict\n:retourne: un couple avec listlist repr\u00e9sentation, et de la matrice de poids\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "listlist_and_matrix_to_listdict", "decription": "Transforme le pond\u00e9r\u00e9e de la repr\u00e9sentation des listes d'adjacence d'un graphe\nde type listlist + en option matrice de poids\ndans le listdict repr\u00e9sentation\n\n:param graphique: repr\u00e9sentation listlist\n:param poids: option matrice de poids\n:retourne: graphique de la repr\u00e9sentation listdict\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "make_flow_labels", "decription": "G\u00e9n\u00e9rer arc \u00e9tiquettes pour un \u00e9coulement dans un graphe avec des capacit\u00e9s.\n\n:param graphique: liste d'adjacence ou de contigu\u00eft\u00e9 dictionnaire\n:param flux: matrice de flux ou de contigu\u00eft\u00e9 dictionnaire\n:param capac: capacit\u00e9 ou de matrice d'adjacence dictionnaire\n:retourne: listdic repr\u00e9sentation graphique, avec l'arc de l'\u00e9tiquette de cha\u00eenes\n"}, {"name": "matrix_to_listlist", "decription": "transforme un carr\u00e9 de la matrice de poids dans une contigu\u00eft\u00e9 de table de type listlist\nle codage du graphe orient\u00e9 correspondant aux entr\u00e9es de la matrice\ndiff\u00e9rent de None\n\n:param poids: carr\u00e9 de la matrice de poids, de poids[u][v] != Aucun forum de l'arc (u, v)\nexiste\n:complexit\u00e9: lin\u00e9aire\n:r\u00e9sultat: non pond\u00e9r\u00e9es des graphes orient\u00e9s dans le listlist repr\u00e9sentation,\nlistlist[u] contient tous les v pour laquelle l'arc (u,v) existe.\n"}, {"name": "read_graph", "decription": "Lire un graphique \u00e0 partir d'un fichier texte\n\n:param nom de fichier: fichier de texte brut. Tous les num\u00e9ros sont s\u00e9par\u00e9s par un espace.\nCommence par une ligne contenant n (#sommets) et m (#bords).\nAlors m des lignes de suivre, pour chaque bord.\nLes sommets sont num\u00e9rot\u00e9s de 0 \u00e0 n-1.\nLigne pour non pond\u00e9r\u00e9e bord u,v contient deux entiers u, v.\nLigne pour pond\u00e9r\u00e9e bord u,v contient trois nombres entiers u, v, w[u,v].\n\n:param dirig\u00e9: true pour un graphe orient\u00e9, false pour les non-orient\u00e9\n:param pond\u00e9r\u00e9e: true pour un bord pond\u00e9r\u00e9e graphique\n:retourne: graphique en listlist format, qui peut \u00eatre suivi par la matrice de poids\n:complexit\u00e9: O(n + m) pour les non pond\u00e9r\u00e9e graphique,\n:math:`O(n^2)` pour pond\u00e9r\u00e9e graphique\n"}, {"name": "readtab", "decription": "Lit une ligne depuis un fichier avec une liste s\u00e9par\u00e9e par des espaces\ndes \u00e9l\u00e9ments de type ty\n\n:param fichier: flux d'entr\u00e9e, par exemple sys.stdin\n:param ty: un type, par exemple de type int\n:retourne: un tuple avec des \u00e9l\u00e9ments de type ty\n"}, {"name": "readval", "decription": "Lit une ligne depuis un fichier avec un \u00e9l\u00e9ment de type ty\n\n:param fichier: flux d'entr\u00e9e, par exemple sys.stdin\n:param ty: un type, par exemple de type int\n:retourne: un \u00e9l\u00e9ment de type ty\n"}, {"name": "tree_adj_to_prec", "decription": "Transforme un arbre donn\u00e9 que la contigu\u00eft\u00e9 de la liste de pr\u00e9d\u00e9cesseur forme de tableau.\nsi le graphique n'est pas un arbre: sera de retour d'un DFS spanning tree\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:retourne: arbre pr\u00e9d\u00e9cesseur table repr\u00e9sentation\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "tree_prec_to_adj", "decription": "Transforme un arbre donn\u00e9 en tant que pr\u00e9d\u00e9cesseur de table en forme de liste d'adjacence\n\n:param prec: pr\u00e9d\u00e9cesseur tableau repr\u00e9sentant un arbre, prec[u] == v ssi u est\nsuccesseur de v,\nsauf pour la racine o\u00f9 prec[root] == root\n:param root: root sommet de l'arbre\n:retourne: graphes non orient\u00e9s dans listlist repr\u00e9sentation\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "write_graph", "decription": "\u00c9crit un graphique vers un fichier au format DOT\n\n:param dotfile: le nom de fichier.\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param dirig\u00e9: true si le graphe est orient\u00e9, false si non orient\u00e9\n:param poids: dans un format de matrice ou m\u00eame listdict graphique ou Aucun\n:param node_label: sommet de l'\u00e9tiquette de table ou Aucun\n:param arc_label: arc \u00e9tiquette de la matrice ou Aucun\n:param commentaire: cha\u00eene de commentaire pour la dot de fichier ou Aucun\n:param node_mark: ensemble de n\u0153uds pour \u00eatre affich\u00e9es en gris\n:param arc_marc: ensemble d'arcs \u00e0 \u00eatre montr\u00e9 en rouge\n:complexit\u00e9: O(|V| + |E|)`\n"}], "classes": [{"name": "Graphique", "description": null, "methods": [{"name": "__getitem__", "description": null}, {"name": "__init__", "description": null}, {"name": "__len__", "description": null}, {"name": "add_arc", "description": null}, {"name": "add_edge", "description": null}, {"name": "add_node", "description": null}]}]}}, {"EN": {"name": "next_permutation", "description": "Next permutation\nprochaine permuation\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "convert", "decription": "\n    solves a cryptogram in the style SEND + MORE = MONEY\n    "}, {"name": "next_permutation", "decription": "find the next permutation of tab in the lexicographical order\n\n    :param tab: table with n elements from an ordered set\n    :modifies: table to next permutation\n    :returns: False if permutation is already lexicographical maximal\n    :complexity: O(n)\n    "}, {"name": "solve_word_addition", "decription": "returns number of solutions"}], "classes": []}, "FR": {"name": "next_permutation", "description": "Prochaine permutation\nprochaine permuation\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "convertir", "decription": "\nr\u00e9sout un cryptogramme dans le style SEND + MORE = MONEY\n"}, {"name": "next_permutation", "decription": "trouver la prochaine permutation de l'onglet dans l'ordre lexicographique\n\n:onglet param\u00e8tres: tableau \u00e0 n \u00e9l\u00e9ments d'un ensemble ordonn\u00e9\n:modifie: table \u00e0 c\u00f4t\u00e9 de permutation\n:retourne False si la permutation est d\u00e9j\u00e0 lexicographiques maximale\n:complexit\u00e9: O(n)\n"}, {"name": "solve_word_addition", "decription": "retourne le nombre de solutions"}], "classes": []}}, {"EN": {"name": "gauss_jordan", "description": "Linear equation system Ax=b by Gauss-Jordan\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "diagonalize", "decription": "diagonalize "}, {"name": "gauss_jordan", "decription": "Linear equation system Ax=b by Gauss-Jordan\n\n    :param A: n by m matrix\n    :param x: table of size n\n    :param b: table of size m\n    :modifies: x will contain solution if any\n    :returns int:\n          0 if no solution,\n          1 if solution unique,\n          2 otherwise\n    :complexity: :math:`O(n^2m)`\n    "}, {"name": "is_zero", "decription": "error tolerant zero test\n    "}], "classes": []}, "FR": {"name": "gauss_jordan", "description": "\u00c9quation lin\u00e9aire du syst\u00e8me Ax=b par Gauss-Jordan\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "diagonalize", "decription": "diagonalize "}, {"name": "gauss_jordan", "decription": "\u00c9quation lin\u00e9aire du syst\u00e8me Ax=b par Gauss-Jordan\n\n:param A: n par m la matrice\n:param x: tableau de taille n\n:param b: tableau de taille m\n:modifie: x contiendra solution si tout\n:renvoie int:\n0 si pas de solution,\n1 si la solution unique,\n2 dans le cas contraire\n:complexit\u00e9: :math:`O(n^2 m)`\n"}, {"name": "is_zero", "decription": "erreur \u00e0 tol\u00e9rance z\u00e9ro test\n"}], "classes": []}}, {"EN": {"name": "range_minimum_query", "description": "Range minimum query\nMinimum d'une plage --- range minimum query\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [], "classes": [{"name": "LazySegmentTree", "description": "maintains a tree to allow quick updates and queries on a table.\n\n    This is more general than a Fenwick tree or a tree for MinRangeQuery. Here\n    queries and updates act on index ranges. Updates can be set a range to a\n    value or add a value to a range. Queries can be max, min and sum over an\n    index range. All operations run in time O(log n) for a the table size n.\n    The given ranges are in the form [i,j] where i is included and j excluded.\n    In the recursive calls, node is the index of a node in the tree, and left,\n    right its range. Values can be any numerical values allowing max, min, and\n    sum, such as integers, floating point numbers or fractions (from the class\n    Fraction). Updates over an empty range is valid and does nothing. Queries\n    over an empty range is valid and returns the neutral value -inf, +inf or\n    0.\n\n    If the node is cleared, then maxval, minval, sumval represent for each\n    node the query responses over the corresponding index ranges.  If the node\n    is not clean, it means that lazyset and/or lazyadd contain suspendet\n    update instructions for that node. Clearing a node means propagating these\n    values to the descents in the subtrees, and updating maxval,minval and\n    sumval for that node.\n    ", "methods": [{"name": "__init__", "description": "stores an integer table tab.\n        will be padded to get a table with a size of a power of 2.\n\n        :param array tab: of positive length\n        "}, {"name": "_add", "description": null}, {"name": "_clear", "description": "propagates the lazy updates for this node to the subtrees.\n        as a result the maxval, minval, sumval values for the node\n        are up to date.\n        "}, {"name": "_dump", "description": null}, {"name": "_maintain", "description": "maintains the invariant for the given node\n        :promize: the lazy values are None/0 for this node\n        "}, {"name": "_max", "description": null}, {"name": "_min", "description": null}, {"name": "_set", "description": null}, {"name": "_sum", "description": null}, {"name": "add", "description": null}, {"name": "max", "description": null}, {"name": "min", "description": null}, {"name": "set", "description": null}, {"name": "sum", "description": null}]}, {"name": "RangeMinQuery", "description": "Range minimum query\n\n    maintains a table t, can read/write items t[i],\n    and query range_min(i,k) = min{ t[i], t[i + 1], ..., t[k - 1]}\n    :complexity: all operations in O(log n), for n = len(t)\n    ", "methods": [{"name": "__getitem__", "description": null}, {"name": "__init__", "description": null}, {"name": "__setitem__", "description": " sets t[i] to v.\n            :complexity: O(log len(t))\n        "}, {"name": "_range_min", "description": "returns the minimum in t in the indexes [i, k) intersected\n           with [start, start + span).\n           p is the node associated to the later interval.\n        "}, {"name": "range_min", "description": ":returns:  min{ t[i], t[i + 1], ..., t[k - 1]}\n        :complexity: O(log len(t))\n        "}]}]}, "FR": {"name": "range_minimum_query", "description": "Le minimum de la plage de la requ\u00eate\nMinimum d'une plage --- le minimum de la plage de la requ\u00eate\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [], "classes": [{"name": "LazySegmentTree", "description": "maintient un arbre pour permettre des mises \u00e0 jour rapides et des requ\u00eates sur une table.\n\nC'est plus g\u00e9n\u00e9ral qu'un Fenwick arbre ou un arbre pour MinRangeQuery. Ici\nles requ\u00eates et mises \u00e0 jour de la loi sur l'indice des plages. Les mises \u00e0 jour peuvent \u00eatre d\u00e9finir une plage pour un\nvaleur ou d'ajouter une valeur \u00e0 une plage. Les requ\u00eates peuvent \u00eatre max, min et somme sur un\nl'indice de gamme. Toutes les op\u00e9rations sont ex\u00e9cut\u00e9es en temps O(log n) pour un tableau de taille n.\nLes plages sont de la forme [i,j] o\u00f9 i est inclus et j exclus.\nDans les appels r\u00e9cursifs, n\u0153ud est l'indice d'un n\u0153ud de l'arbre, et \u00e0 gauche,\ndroit de sa gamme. Les valeurs peuvent \u00eatre des valeurs num\u00e9riques permettant de max, min, et\nsomme, tels que les entiers, les nombres \u00e0 virgule flottante ou fractions (\u00e0 partir de la classe\nFraction). Les mises \u00e0 jour sur un vide gamme est valide et ne fait rien. Les requ\u00eates\nsur un espace de plage est valide et renvoie la valeur neutre -inf, +inf ou\n0.\n\nSi le n\u0153ud est d\u00e9sactiv\u00e9e, puis maxval, minval, sumval repr\u00e9senter, pour chacun\nn\u0153ud de r\u00e9ponses \u00e0 des requ\u00eates sur l'index correspondant plages. Si le n\u0153ud\nn'est pas propre, il signifie que lazyset et/ou lazyadd contenir suspendet\ninstructions de mise \u00e0 jour pour ce n\u0153ud. La compensation d'un n\u0153ud moyens de multiplication de ces\nles valeurs pour les descentes dans les sous-arborescences, et la mise \u00e0 jour maxval,minval et\nsumval pour ce n\u0153ud.\n", "methods": [{"name": "__init__", "description": "contient un entier onglet table.\nsera compl\u00e9t\u00e9e de fa\u00e7on \u00e0 obtenir un tableau avec une taille, d'une puissance de 2.\n\n:param array onglet: positifs de la longueur\n"}, {"name": "_add", "description": null}, {"name": "_clear", "description": "propage les paresseux mises \u00e0 jour pour ce n\u0153ud, de la sous-arbres.\nen cons\u00e9quence, le maxval, minval, sumval valeurs pour le n\u0153ud\nsont \u00e0 jour.\n"}, {"name": "_dump", "description": null}, {"name": "_maintain", "description": "maintient l'invariant pour le noeud donn\u00e9\n:promize: les paresseux, les valeurs sont non/0 pour ce n\u0153ud\n"}, {"name": "_max", "description": null}, {"name": "_min", "description": null}, {"name": "_set", "description": null}, {"name": "_sum", "description": null}, {"name": "ajouter", "description": null}, {"name": "max", "description": null}, {"name": "min", "description": null}, {"name": "ensemble", "description": null}, {"name": "somme", "description": null}]}, {"name": "RangeMinQuery", "description": "Le minimum de la plage de la requ\u00eate\n\nmaintient une table t, peut lire/\u00e9crire les \u00e9l\u00e9ments de t[i],\net la requ\u00eate range_min(i,k) = min{ t[i], t[i + 1], ..., t[k - 1]}\n:complexit\u00e9: toutes les op\u00e9rations en O(log n), pour n = len(t)\n", "methods": [{"name": "__getitem__", "description": null}, {"name": "__init__", "description": null}, {"name": "__setitem__", "description": " jeux de t[i] v.\n:complexit\u00e9: O(log len(t))\n"}, {"name": "_range_min", "description": "renvoie le minimum en t dans les indices [i, k) a recoup\u00e9\navec [start, start + dur\u00e9e).\np est le n\u0153ud associ\u00e9 \u00e0 la fin de l'intervalle.\n"}, {"name": "range_min", "description": ":retourne: min{ t[i], t[i + 1], ..., t[k - 1]}\n:complexit\u00e9: O(log len(t))\n"}]}]}}, {"EN": {"name": "biconnected_components", "description": "bi-connected components, cut vertices and cut cut-nodes\njill-jenn vie, christoph durr et louis abraham - 2015-2019\n", "functions": [{"name": "cut_nodes_edges", "decription": "Bi-connected components\n\n    :param graph: undirected graph. in listlist format. Cannot be in listdict\n    format.\n    :returns: a tuple with the list of cut-nodes and the list of cut-edges\n    :complexity: `O(|V|+|E|)`\n    "}, {"name": "cut_nodes_edges2", "decription": "Bi-connected components, alternative recursive implementation\n\n    :param graph: undirected graph. in listlist format. Cannot be in listdict\n    format.\n    :assumes: graph has about 5000 vertices at most, otherwise memory limit is\n    reached\n    :returns: a tuple with the list of cut-nodes and the list of cut-edges\n    :complexity: `O(|V|+|E|)` in average, `O(|V|+|E|^2)` in worst case due to\n    use of dictionary\n    "}], "classes": []}, "FR": {"name": "biconnected_components", "description": "bi-composants connect\u00e9s, couper les sommets et coupe-n\u0153uds\njill-jenn vie, christoph durr et louis abraham - 2015-2019\n", "functions": [{"name": "cut_nodes_edges", "decription": "Bi-composants connect\u00e9s\n\n:param graphe: graphe non-dirig\u00e9. dans listlist format. Ne peut pas \u00eatre dans listdict\nformat.\n:retourne: un tuple avec la liste des coupe-n\u0153uds et la liste des bords coup\u00e9s\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "cut_nodes_edges2", "decription": "Bi-composants connect\u00e9s, la variante r\u00e9cursive de la mise en \u0153uvre\n\n:param graphe: graphe non-dirig\u00e9. dans listlist format. Ne peut pas \u00eatre dans listdict\nformat.\n:suppose: graphique a environ 5000 sommets \u00e0 la plupart, sinon de la limite de m\u00e9moire est\natteint\n:retourne: un tuple avec la liste des coupe-n\u0153uds et la liste des bords coup\u00e9s\n:complexit\u00e9: O(|V|+|E|)` en moyenne, \" O(|V|+|E|^2)` dans le pire des cas, \u00e0 cause de\nl'utilisation du dictionnaire\n"}], "classes": []}}, {"EN": {"name": "bipartite_vertex_cover", "description": "Bipartie vertex cover\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "_alternate", "decription": "extend alternating tree from free vertex u.\n      visitU, visitV marks all vertices covered by the tree.\n    "}, {"name": "bipartite_vertex_cover", "decription": "Bipartite minimum vertex cover by Koenig's theorem\n\n    :param bigraph: adjacency list, index = vertex in U,\n                                    value = neighbor list in V\n    :assumption: U = V = {0, 1, 2, ..., n - 1} for n = len(bigraph)\n    :returns: boolean table for U, boolean table for V\n    :comment: selected vertices form a minimum vertex cover,\n              i.e. every edge is adjacent to at least one selected vertex\n              and number of selected vertices is minimum\n    :complexity: `O(|V|*|E|)`\n    "}], "classes": []}, "FR": {"name": "bipartite_vertex_cover", "description": "Bipartie vertex cover\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "_alternate", "decription": "\u00e9tendre une alternance de arbre gratuit sommet u.\nvisitU, visitV les marques de tous les sommets couverts par l'arbre.\n"}, {"name": "bipartite_vertex_cover", "decription": "Bipartite minimum vertex cover par le th\u00e9or\u00e8me de Koenig\n\n:param bigraph: la contigu\u00eft\u00e9 de la liste, index = sommet U,\nvaleur = voisin la liste en V\n:hypoth\u00e8se: U = V = {0, 1, 2, ..., n - 1} pour n = len(bigraph)\n:retourne: boolean table en U, boolean table pour V\n:commentaire: les vertices s\u00e9lectionn\u00e9s former un minimum vertex cover,\nc'est \u00e0 dire chaque ar\u00eate est adjacent \u00e0 au moins un sommet s\u00e9lectionn\u00e9\net le nombre de vertices s\u00e9lectionn\u00e9s est minimum\n:complexit\u00e9: O(|V|*|E|)`\n"}], "classes": []}}, {"EN": {"name": "longest_common_subsequence", "description": "Longest increasing subsequence\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "longest_common_subsequence", "decription": "Longest common subsequence\n\n    Dynamic programming\n\n    :param x:\n    :param y: x, y are lists or strings\n    :returns: longest common subsequence in form of a string\n    :complexity: `O(|x|*|y|)`\n    "}], "classes": []}, "FR": {"name": "longest_common_subsequence", "description": "Plus longue sous-suite croissante\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "longest_common_subsequence", "decription": "Plus longue sous-suite commune\n\nLa programmation dynamique\n\n:param x:\n:param y: x, y sont des listes ou des cha\u00eenes de caract\u00e8res\n:retourne: la plus longue sous-suite commune sous la forme d'une cha\u00eene de caract\u00e8res\n:complexit\u00e9: O(|x|*|y|)`\n"}], "classes": []}}, {"EN": {"name": "min_mean_cycle", "description": "Minimum mean cycle by Karp\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "min_mean_cycle", "decription": "Minimum mean cycle by Karp\n\n    :param graph: directed graph in listlist or listdict format\n    :param weight: in matrix format or same listdict graph\n    :param int start: vertex that should be contained in cycle\n    :returns: cycle as vertex list, average arc weights\n              or None if there is no cycle from start\n    :complexity:  `O(|V|*|E|)`\n    "}], "classes": []}, "FR": {"name": "min_mean_cycle", "description": "Minimum moyenne du cycle par Karp\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "min_mean_cycle", "decription": "Minimum moyenne du cycle par Karp\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param poids: dans un format de matrice ou m\u00eame listdict graphique\n:param int start: vertex qui doivent \u00eatre contenues dans le cycle\n:retourne: cycle sommet de la liste, la moyenne de poids de l'arc\nou Aucun si il n'y a pas de cycle de d\u00e9marrage\n:complexit\u00e9: O(|V|*|E|)`\n"}], "classes": []}}, {"EN": {"name": "kuhn_munkres", "description": "Maximum profit bipartite matching by Kuhn-Munkres\njill-jenn vie, christoph durr and samuel tardieu - 2014-2019\n\nprimal LP\n\n    max sum_{u,v} w[u,v] * x[u,v]\n\n    such that\n    for all u in U: sum_v x[u,v] == 1   (l[u])\n\n    for all v in V: sum_u x[u,v] <= 1   (l[v])\n\n    for all u,v: x[u,v] >= 0\n\n\ndual LP\n\n    min sum_u l[u] + sum_v l[v]\n\n    such that\n    for all u,v:  l[u] + l[v] >= w[u,v]   (*)\n\n    for all u in U: l[u] is arbitrary (free variable)\n    for all v in V: l[v] >= 0\n\n\nprimal-dual algorithm:\n\n    Start with trivial solution l for dual and with trivial\n    non-solution x for primal.\n\n    Iteratively improve primal or dual solution, maintaining complementary\n    slackness conditions.\n\n", "functions": [{"name": "kuhn_munkres", "decription": "Maximum profit bipartite matching by Kuhn-Munkres\n\n    :param G: weight matrix where G[u][v] is the weight of edge (u,v),\n    :param TOLERANCE: a value with absolute value below tolerance\n                      is considered as being zero.\n                      If G consists of integer or fractional values\n                      then TOLERANCE can be chosen 0.\n    :requires: graph (U,V,E) is complete bi-partite graph with len(U) <= len(V)\n               float('-inf') or float('inf') entries in G\n               are allowed but not None.\n    :returns: matching table from U to V, value of matching\n    :complexity: :math:`O(|U|^2 |V|)`\n    "}], "classes": []}, "FR": {"name": "kuhn_munkres", "description": "Le Maximum de profit bipartite correspondance par Kuhn-Munkres\njill-jenn vie, christoph durr et samuel tardieu - 2014-2019\n\nprimal LP\n\nmax sum_{u,v} w[u,v] * x[u,v]\n\ntels que\npour tout u dans U: sum_v x[u,v] == 1 (g[u])\n\npour tout v dans V: sum_u x[u,v] <= 1 (l[v])\n\npour tous u,v: x[u,v] >= 0\n\n\ndouble LP\n\nmin sum_u l[u] + sum_v l[v]\n\ntels que\npour tous u,v: l[u] + l[v] >= w[u,v] (*)\n\npour tout u dans U: l[u] est arbitraire (variable ind\u00e9pendante)\npour tout v dans V: l[v] >= 0\n\n\nprimal-dual algorithme:\n\nCommencer avec la solution triviale l pour le double et avec trivial\nnon-solution x pour primal.\n\nDe mani\u00e8re it\u00e9rative am\u00e9liorer primal ou double solution, le maintien de la compl\u00e9mentaire\nla paresse conditions.\n\n", "functions": [{"name": "kuhn_munkres", "decription": "Le Maximum de profit bipartite correspondance par Kuhn-Munkres\n\n:param G: matrice de poids o\u00f9 G[u][v] est le poids de l'ar\u00eate (u,v),\n:param TOL\u00c9RANCE: une valeur absolue de la valeur au-dessous de la tol\u00e9rance\nest consid\u00e9r\u00e9 comme \u00e9tant \u00e9gal \u00e0 z\u00e9ro.\nSi G est constitu\u00e9 d'un nombre entier ou fractionnaire valeurs\nensuite, la TOL\u00c9RANCE peut \u00eatre choisi 0.\n:n\u00e9cessite: graphique (U,V,E) est complet bi-partite graphique avec len(U) <= len(V)\nfloat('-inf') ou float('inf') entr\u00e9es en G\nsont permis, mais pas Aucun.\n:retourne: table de correspondance de U \u00e0 V, la valeur de correspondance\n:complexit\u00e9: :math:`O(|U|^2 |V|)`\n"}], "classes": []}}, {"EN": {"name": "freivalds", "description": "Test matrix product AB = C by Freivalds\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "freivalds", "decription": "Tests matrix product AB=C by Freivalds\n\n    :param A: n by n numerical matrix\n    :param B: same\n    :param C: same\n    :returns: False with high probability if AB != C\n\n    :complexity:\n        :math:`O(n^2)`\n    "}, {"name": "mult", "decription": "\n    function to multiply a matrix times a vector\n    "}, {"name": "readarray", "decription": "\n    function to read an array\n    "}, {"name": "readint", "decription": "\n    function to read an integer from stdin\n    "}, {"name": "readmatrix", "decription": "\n    function to read a matrix\n    "}], "classes": []}, "FR": {"name": "freivalds", "description": "Test de la matrice produit AB = C par Freivalds\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "freivalds", "decription": "Les Tests de la matrice produit AB=C par Freivalds\n\n:param A: n par n matrice num\u00e9rique\n:param B: m\u00eame\n:param C: m\u00eame\n:retourne: Faux avec une forte probabilit\u00e9, si AB != C\n\n:complexit\u00e9:\n:math:`O(n^2)`\n"}, {"name": "mult", "decription": "\nfonction pour multiplier une matrice fois un vecteur\n"}, {"name": "readarray", "decription": "\nfonction pour lire un tableau\n"}, {"name": "readint", "decription": "\nfonction pour lire un entier sur l'entr\u00e9e standard\n"}, {"name": "readmatrix", "decription": "\nla fonction de lecture d'une matrice\n"}], "classes": []}}, {"EN": {"name": "trie", "description": "trie - correcteur orthographique\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "Trie", "decription": "\n    :param S: set of words\n    :returns: trie containing all words from S\n    :complexity: linear in total word sizes from S\n    "}, {"name": "add", "decription": "\n    :param T: trie\n    :param string w: word to be added to T\n    :returns: new trie consisting of w added into T\n    :complexity: O(len(w))\n    "}, {"name": "search", "decription": "Searches for w[i:] in trie T with distance at most dist\n    "}, {"name": "spell_check", "decription": "Spellchecker\n\n    :param T: trie encoding the dictionary\n    :param w: given word\n    :returns: a closest word from the dictionary\n    :complexity: linear if distance was constant\n    "}], "classes": [{"name": "TrieNode", "description": null, "methods": [{"name": "__init__", "description": null}]}]}, "FR": {"name": "trie", "description": "trie - correcteur orthographique\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "Trie", "decription": "\n:param S: jeu de mots\n:retourne: trie contenant tous les mots de S\n:complexit\u00e9: lin\u00e9aire total de mot tailles de S\n"}, {"name": "ajouter", "decription": "\n:param T: trie\n:param string w: mot \u00e0 ajouter \u00e0 T\n:retourne: nouvelle trie compos\u00e9 de w ajout\u00e9 dans T\n:complexit\u00e9: O(len(l))\n"}, {"name": "recherche", "decription": "Recherches pour w[i:] dans trie T avec la distance \u00e0 la plupart des dist\n"}, {"name": "spell_check", "decription": "Correcteur d'orthographe\n\n:param T: trie codant pour le dictionnaire\n:param w: mot donn\u00e9\n:retourne: plus proche d'un mot du dictionnaire\n:complexit\u00e9: lin\u00e9aire si la distance est constante\n"}], "classes": [{"name": "TrieNode", "description": null, "methods": [{"name": "__init__", "description": null}]}]}}, {"EN": {"name": "polygon", "description": "Area of polygone\nmesures polygone\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "area", "decription": "Area of a polygone\n\n    :param p: list of the points taken in any orientation,\n              p[0] can differ from p[-1]\n    :returns: area\n    :complexity: linear\n    "}, {"name": "is_simple", "decription": "Test if a rectilinear polygon is is_simple\n\n    :param polygon: list of points as (x,y) pairs along the closed polygon\n    :returns: True if the segements do not intersect\n    :complexity: O(n log n) for n=len(polygon)\n    "}], "classes": []}, "FR": {"name": "polygone", "description": "Zone de polygone\nmesures polygone\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "la zone", "decription": "Aire d'un polygone\n\n:param p: liste des points de pris dans n'importe quelle orientation,\np[0] peut diff\u00e9rer de p[-1]\n:r\u00e9sultat: domaine\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "is_simple", "decription": "Tester si un polygone rectiligne est is_simple\n\n:param polygone: liste des points (x,y) paires le long du polygone ferm\u00e9\n:retourne: True si le segements ne se croisent pas\n:complexit\u00e9: O(n log n) pour n=len(polygone)\n"}], "classes": []}}, {"EN": {"name": "huffman", "description": "Huffman code\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [{"name": "extract", "decription": "Extract Huffman code from a Huffman tree\n\n    :param code: a dictionary that will contain the constructed code.\n                 should initially be empty.\n    :param tree: a node of the tree.\n                 Leafs are of the form (frequency, symbol).\n                 Inner nodes are of the form [left_sub_tree, right_sub_tree].\n    :param prefix: a list with the 01 characters encoding the path from\n                    the root to the node `tree`\n    :complexity: O(n), where n = number of nodes in tree\n    "}, {"name": "huffman", "decription": "Huffman code\n\n    :param freq: dictionary with frequencies for each item\n    :returns: dictionary with binary code string for each item\n    :complexity: O(n log n), where n = len(freq)\n    "}], "classes": []}, "FR": {"name": "huffman", "description": "Le code de Huffman\njill-jenn vie et christoph durr - 2014-2019\n", "functions": [{"name": "extrait", "decription": "Extrait de Huffman code \u00e0 partir d'un arbre de Huffman\n\n:param code: un dictionnaire qui contient la construction du code.\ndoit \u00eatre initialement vide.\n:param arbre: un n\u0153ud de l'arbre.\nLeafs sont de la forme (fr\u00e9quence, symbole).\nInt\u00e9rieure n\u0153uds sont de la forme [left_sub_tree, right_sub_tree].\n:param pr\u00e9fixe: une liste avec les 01 encodage de caract\u00e8res du chemin de\nla racine au n\u0153ud de l'arbre\n:complexit\u00e9: O(n), o\u00f9 n = nombre de n\u0153uds dans l'arbre\n"}, {"name": "huffman", "decription": "Le code de Huffman\n\n:param freq: dictionnaire avec des fr\u00e9quences pour chaque \u00e9l\u00e9ment\n:retourne: dictionnaire avec le code binaire de la cha\u00eene pour chaque \u00e9l\u00e9ment\n:complexit\u00e9: O(n log n), o\u00f9 n = len(freq)\n"}], "classes": []}}, {"EN": {"name": "arithm_expr_target", "description": "Create arithmetic expression approaching target value\njill-j\u00eann vie, christoph d\u00fcrr et jean-christophe filli\u00e2tre - 2014-2019\n", "functions": [{"name": "arithm_expr_target", "decription": " Create arithmetic expression approaching target value\n    :param x: allowed constants\n    :param target: target value\n    :returns: string in form 'expression=value'\n    :complexity: huge\n    "}], "classes": []}, "FR": {"name": "arithm_expr_target", "description": "Cr\u00e9er une expression arithm\u00e9tique approche de la valeur de la cible\njill-j\u00eann vie, christoph d\u00fcrr et jean-christophe filli\u00e2tre - 2014-2019\n", "functions": [{"name": "arithm_expr_target", "decription": " Cr\u00e9er une expression arithm\u00e9tique approche de la valeur de la cible\n:param x: permis constantes\n:param cible: valeur cible\n:retourne: cha\u00eene en forme de l '\"expression=valeur\"\n:complexit\u00e9: \u00e9norme\n"}], "classes": []}}, {"EN": {"name": "subsetsum", "description": "subsetsum\njill-jenn vie et christoph durr - 2015-2018\n", "functions": [{"name": "coin_change", "decription": "Coin change\n\n    :param x: table of non negative values\n    :param R: target value\n    :returns bool: True if there is a non negative linear combination\n    of x that has value R\n    :complexity: O(n*R)\n    "}, {"name": "subset_sum", "decription": "Subsetsum\n\n    :param x: table of non negative values\n    :param R: target value\n    :returns bool: True if a subset of x sums to R\n    :complexity: O(n*R)\n    "}], "classes": []}, "FR": {"name": "subsetsum", "description": "subsetsum\njill-jenn vie et christoph durr - 2015-2018\n", "functions": [{"name": "coin_change", "decription": "Pi\u00e8ce de monnaie de changement\n\n:param x: tableau des non valeurs n\u00e9gatives\n:param R: valeur cible\n:renvoie un bool\u00e9en: True si il y a un non n\u00e9gatif combinaison lin\u00e9aire\nde x qui a de la valeur R\n:complexit\u00e9: O(n*R)\n"}, {"name": "subset_sum", "decription": "Subsetsum\n\n:param x: tableau des non valeurs n\u00e9gatives\n:param R: valeur cible\n:renvoie un bool\u00e9en: True si un sous-ensemble de x sommes \u00e0 la R\n:complexit\u00e9: O(n*R)\n"}], "classes": []}}, {"EN": {"name": "windows_k_distinct", "description": "All sliding windows containing k distinct elements\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "windows_k_distinct", "decription": "Find all largest windows containing exactly k distinct elements\n\n    :param x: list or string\n    :param k: positive integer\n    :yields: largest intervals [i, j) with len(set(x[i:j])) == k\n    :complexity: `O(|x|)`\n    "}], "classes": []}, "FR": {"name": "windows_k_distinct", "description": "Toutes les fen\u00eatres coulissantes contenant k \u00e9l\u00e9ments distincts\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "windows_k_distinct", "decription": "Trouver toutes les plus grandes fen\u00eatres contenant exactement k \u00e9l\u00e9ments distincts\n\n:param x: liste ou cha\u00eene\n:param k: entier positif\n:rendements: de plus grands intervalles [i, j) avec len(set(x[i:j])) == k\n:complexit\u00e9: O(|x|)`\n"}], "classes": []}}, {"EN": {"name": "interval_tree", "description": "Interval tree\nchristoph d\u00fcrr - jill-j\u00eann vie - 2013-2018\n", "functions": [{"name": "interval_tree", "decription": "Construct an interval tree\n\n    :param intervals: list of half-open intervals\n                      encoded as value pairs *[left, right)*\n    :assumes: intervals are lexicographically ordered\n              ``>>> assert intervals == sorted(intervals)``\n    :returns: the root of the interval tree\n    :complexity: :math:`O(n)`\n    "}, {"name": "intervals_containing", "decription": "Query the interval tree\n\n    :param t: root of the interval tree\n    :param p: value\n    :returns: a list of intervals containing p\n    :complexity: O(log n + m), where n is the number of intervals in t,\n                and m the length of the returned list\n    "}], "classes": [{"name": "_Node", "description": null, "methods": [{"name": "__init__", "description": null}]}]}, "FR": {"name": "interval_tree", "description": "Intervalle d'arbre\nchristoph d\u00fcrr - jill-j\u00eann vie - 2013-2018\n", "functions": [{"name": "interval_tree", "decription": "Construire un intervalle de l'arbre\n\n:param intervalles: liste des demi-ouvert intervalles\ncod\u00e9s comme des paires de valeur *[gauche, droite)*\n:suppose: les intervalles sont ordonn\u00e9 lexicographiquement\n`>>> affirmer intervalles == sorted(intervalles)`\n:renvoie: la racine de l'intervalle de l'arbre\n:complexit\u00e9: :math:`O(n)`\n"}, {"name": "intervals_containing", "decription": "Requ\u00eate de l'intervalle de l'arbre\n\n:param t: racine de l'intervalle de l'arbre\n:param p: valeur\n:retourne: une liste d'intervalles contenant p\n:complexit\u00e9: O(log n + m), o\u00f9 n est le nombre d'intervalles dans t,\net m la longueur de la liste retourn\u00e9e\n"}], "classes": [{"name": "_Node", "description": null, "methods": [{"name": "__init__", "description": null}]}]}}, {"EN": {"name": "bipartite_matching", "description": "Bipartie maximum matching\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "augment", "decription": "augment "}, {"name": "max_bipartite_matching", "decription": "Bipartie maximum matching\n\n    :param bigraph: adjacency list, index = vertex in U,\n                                    value = neighbor list in V\n    :assumption: U = V = {0, 1, 2, ..., n - 1} for n = len(bigraph)\n    :returns: matching list, match[v] == u iff (u, v) in matching\n    :complexity: `O(|V|*|E|)`\n    "}, {"name": "max_bipartite_matching2", "decription": "Bipartie maximum matching\n\n    :param bigraph: adjacency list, index = vertex in U,\n                                    value = neighbor list in V\n    :comment: U and V can have different cardinalities\n    :returns: matching list, match[v] == u iff (u, v) in matching\n    :complexity: `O(|V|*|E|)`\n    "}], "classes": []}, "FR": {"name": "bipartite_matching", "description": "Bipartie maximum correspondant\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "augmenter", "decription": "augmenter "}, {"name": "max_bipartite_matching", "decription": "Bipartie maximum correspondant\n\n:param bigraph: la contigu\u00eft\u00e9 de la liste, index = sommet U,\nvaleur = voisin la liste en V\n:hypoth\u00e8se: U = V = {0, 1, 2, ..., n - 1} pour n = len(bigraph)\n:retourne: liste, correspondance[v] == u ssi (u, v) dans la correspondance de\n:complexit\u00e9: O(|V|*|E|)`\n"}, {"name": "max_bipartite_matching2", "decription": "Bipartie maximum correspondant\n\n:param bigraph: la contigu\u00eft\u00e9 de la liste, index = sommet U,\nvaleur = voisin la liste en V\ncommentaire: U et V peuvent avoir diff\u00e9rentes cardinalit\u00e9s\n:retourne: liste, correspondance[v] == u ssi (u, v) dans la correspondance de\n:complexit\u00e9: O(|V|*|E|)`\n"}], "classes": []}}, {"EN": {"name": "manacher", "description": "Longest palindrome in a string by Manacher\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n\nhttp://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html\n\nAlgorithme de Manacher\nprobl\u00e8me: plus long palindrome\nentr\u00e9e: cha\u00eene s\nsortie: indices i, j tel que s[i:j] est un palindrome\n        et que j-i est maximal et i maximal\ncomplexit\u00e9: temps lin\u00e9aire\n\ntous les indices r\u00e9f\u00e8rent \u00e0 une cha\u00eene fictive t\nde la forme \"^#a#b#a#a#$\" si s=\"abaa\"\ninvariant: pour chaque pr\u00e9fixe vu\non maintient un palindrome centr\u00e9 en c et de bord droit r\nqui maximise r\nainsi que p[i] = plus grand rayon d'un palindrome centr\u00e9 en i\n", "functions": [{"name": "manacher", "decription": "Longest palindrome in a string by Manacher\n\n    :param s: string\n    :requires: s is not empty\n    :returns: i,j such that s[i:j] is the longest palindrome in s\n    :complexity: O(len(s))\n    "}], "classes": []}, "FR": {"name": "manacher", "description": "Le plus long palindrome dans une cha\u00eene de caract\u00e8res par Manacher\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n\nhttp://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html\n\nAlgorithme de Manacher\nprobleme: plus long palindrome\nentr\u00e9e: cha\u00eene s\nsortie: les indices i, j tel que s[i:j] est un palindrome\net que j-je hne maximale et j'maximale\ncomplexit\u00e9: temps lin\u00e9aire\n\ntous les indices r\u00e9f\u00e8rent \u00e0 une cha\u00eene fictive t\nde la forme \"^#a#b#a#a#$\" si s=\"abaa\"\ninvariant: pour chaque pr\u00e9fixe vu\nsur le maintient de l'onu palindrome centr\u00e9 en c et de bord droit de r\nqui de maximiser r\nainsi que p[i] = plus grand rayon d'un palindrome centr\u00e9 en i\n", "functions": [{"name": "manacher", "decription": "Le plus long palindrome dans une cha\u00eene de caract\u00e8res par Manacher\n\n:param s: string\n:n\u00e9cessite: s n'est pas vide\n:retourne: i,j tel que s[i:j] est le plus long palindrome de la s\n:complexit\u00e9: O(len(s))\n"}], "classes": []}}, {"EN": {"name": "left_right_inversions", "description": "Left and right inversions in a table\nchristoph d\u00fcrr - 2016-2019\n", "functions": [{"name": "_merge_sort", "decription": null}, {"name": "left_right_inversions", "decription": " Compute left and right inversions of each element of a table.\n\n    :param tab: list with comparable elements\n    :returns: lists left and right. left[j] = the number of\n    i<j such that tab[i] > tab[j].\n              right[i] = the number of i<j such that tab[i] > tab[j].\n    :complexity: `O(n log n)`\n    "}], "classes": []}, "FR": {"name": "left_right_inversions", "description": "\u00c0 gauche et \u00e0 droite des inversions dans une table\nchristoph d\u00fcrr - 2016-2019\n", "functions": [{"name": "_merge_sort", "decription": null}, {"name": "left_right_inversions", "decription": " Calculer \u00e0 gauche et \u00e0 droite des inversions de chaque \u00e9l\u00e9ment d'un tableau.\n\n:param onglet: liste comparables, avec des \u00e9l\u00e9ments\n:retourne: les listes de gauche et de droite. gauche[j] = le nombre de\ni<j tels que tab[i] > tab[j].\ndroit[i] = le nombre de i<j tels que tab[i] > tab[j].\n:complexit\u00e9: O(n log n)`\n"}], "classes": []}}, {"EN": {"name": "edmonds_karp", "description": "Maximum flow by Edmonds-Karp\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "_augment", "decription": "find a shortest augmenting path\n    "}, {"name": "edmonds_karp", "decription": "Maximum flow by Edmonds-Karp\n\n    :param graph: directed graph in listlist or listdict format\n    :param capacity: in matrix format or same listdict graph\n    :param int source: vertex\n    :param int target: vertex\n    :returns: flow matrix, flow value\n    :complexity: :math:`O(|V|*|E|^2)`\n    "}], "classes": []}, "FR": {"name": "edmonds_karp", "description": "D\u00e9bit maximal par Edmonds-Karp\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "_augment", "decription": "trouver un plus court chemin augmentant\n"}, {"name": "edmonds_karp", "decription": "D\u00e9bit maximal par Edmonds-Karp\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param capacit\u00e9: dans un format de matrice ou m\u00eame listdict graphique\n:param int source: sommet\n:param int cible: sommet\n:retourne: matrice de flux, le flux de valeur\n:complexit\u00e9: :math:`O(|V|*|E|^2)`\n"}], "classes": []}}, {"EN": {"name": "bellman_ford", "description": "Single source shortest paths by Bellman-Ford\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "bellman_ford", "decription": " Single source shortest paths by Bellman-Ford\n\n    :param graph: directed graph in listlist or listdict format\n    :param weight: can be negative.\n                   in matrix format or same listdict graph\n    :returns: distance table, precedence table, bool\n    :explanation: bool is True if a negative circuit is\n                  reachable from the source, circuits\n                  can have length 2.\n    :complexity: `O(|V|*|E|)`\n    "}], "classes": []}, "FR": {"name": "bellman_ford", "description": "Unique source de plus courts chemins par Bellman-Ford\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "bellman_ford", "decription": " Unique source de plus courts chemins par Bellman-Ford\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param poids: peut \u00eatre n\u00e9gatif.\ndans un format de matrice ou m\u00eame listdict graphique\n:retourne: distance de la table, tableau de pr\u00e9c\u00e9dence, bool\n:explication: bool Vrai si un circuit est n\u00e9gatif\naccessible \u00e0 partir de la source, circuits\npeut avoir une longueur de 2.\n:complexit\u00e9: O(|V|*|E|)`\n"}], "classes": []}}, {"EN": {"name": "rabin_karp", "description": "Find substrings by Rabin-Karp\njill-jenn vie et christoph durr - 2015-2019\n", "functions": [{"name": "matches", "decription": "\n    Checks whether s[i:i + k] is equal to t[j:j + k].\n    We used a loop to ease the implementation in other languages.\n    "}, {"name": "rabin_karp_factor", "decription": "Find a common factor by Rabin-Karp\n\n    :param string s: haystack\n    :param string t: needle\n    :param int k: factor length\n    :returns: (i, j) such that s[i:i + k] == t[j:j + k] or None.\n              In case of tie, lexicographical minimum (i, j) is returned\n    :complexity: O(len(s) + len(t)) in expected time,\n                and O(len(s) + len(t) * k) in worst case\n    "}, {"name": "rabin_karp_matching", "decription": "Find a substring by Rabin-Karp\n\n    :param s: the haystack string\n    :param t: the needle string\n\n    :returns: index i such that s[i: i + len(t)] == t, or -1\n    :complexity: O(len(s) + len(t)) in expected time,\n                and O(len(s) * len(t)) in worst case\n    "}, {"name": "roll_hash", "decription": "roll_hash "}], "classes": []}, "FR": {"name": "rabin_karp", "description": "Trouver des sous-cha\u00eenes par Rabin-Karp\njill-jenn vie et christoph durr - 2015-2019\n", "functions": [{"name": "matchs", "decription": "\nV\u00e9rifie si s[i:i + k] est \u00e9gal \u00e0 t[j:j + k].\nNous avons utilis\u00e9 une boucle pour faciliter la mise en \u0153uvre dans d'autres langues.\n"}, {"name": "rabin_karp_factor", "decription": "Trouver un facteur commun par Rabin-Karp\n\n:param string s: botte de foin\n:param string t: aiguille\n:param int k: facteur de longueur\n:renvoie: (i, j) tel que s[i:i + k] == t[j:j + k] ou Aucune.\nEn cas d'\u00e9galit\u00e9, le vocabulaire minimum (i, j) est retourn\u00e9\n:complexit\u00e9: O(len(s) + len(t)) dans le temps pr\u00e9vu,les\net O(len(s) + len(t) * k) dans le pire des cas\n"}, {"name": "rabin_karp_matching", "decription": "Rechercher une sous-cha\u00eene par Rabin-Karp\n\n:param s: la botte de foin de la cha\u00eene\n:param t: l'aiguille de la cha\u00eene\n\n:retourne: indice i tel que s[i: i + len(t)] == t, ou -1\n:complexit\u00e9: O(len(s) + len(t)) dans le temps pr\u00e9vu,les\net O(len(s) * len(t)) dans le pire des cas\n"}, {"name": "roll_hash", "decription": "roll_hash "}], "classes": []}}, {"EN": {"name": "two_sat", "description": "Solving 2-SAT boolean formulas\njill-jenn vie et christoph durr - 2015-2019\n", "functions": [{"name": "_vertex", "decription": null}, {"name": "two_sat", "decription": "Solving a 2-SAT boolean formula\n\n    :param formula: list of clauses, a clause is pair of literals\n                    over X1,...,Xn for some n.\n                    a literal is an integer, for example -1 = not X1, 3 = X3\n    :returns: table with boolean assignment satisfying the formula or None\n    :complexity: linear\n    "}], "classes": []}, "FR": {"name": "two_sat", "description": "La r\u00e9solution de 2-SAT formules bool\u00e9ennes\njill-jenn vie et christoph durr - 2015-2019\n", "functions": [{"name": "_vertex", "decription": null}, {"name": "two_sat", "decription": "La r\u00e9solution d'un 2-SAT formule bool\u00e9enne\n\n:param formule: liste de clauses, une clause est la paire de litt\u00e9raux\nplus de X1,...,Xn pour n.\nun litt\u00e9ral est un entier, par exemple -1 = pas de X1, 3 = X3\n:retourne: tableau de bool\u00e9ens attribution de la satisfaction de la formule ou Aucun\n:complexit\u00e9: lin\u00e9aire\n"}], "classes": []}}, {"EN": {"name": "permutation_rank", "description": "Permutation rank\nchristoph d\u00fcrr - 2016-2019\n", "functions": [{"name": "permutation_rank", "decription": "Given a permutation of {0,..,n-1} find its rank according to\n    lexicographical order\n\n       :param p: list of length n containing all integers from 0 to n-1\n       :returns: rank between 0 and n! -1\n       :beware: computation with big numbers\n       :complexity: `O(n^2)`\n    "}, {"name": "rank_permutation", "decription": "Given r and n find the permutation of {0,..,n-1} with rank according to\n    lexicographical order equal to r\n\n       :param r n: integers with 0 \u2264 r < n!\n       :returns: permutation p as a list of n integers\n       :beware: computation with big numbers\n       :complexity: `O(n^2)`\n    "}], "classes": []}, "FR": {"name": "permutation_rank", "description": "Permutation rang\nchristoph d\u00fcrr - 2016-2019\n", "functions": [{"name": "permutation_rank", "decription": "Donn\u00e9 une permutation de {0,..,n-1} trouver son rang selon\nl'ordre lexicographique\n\n:param p: liste de longueur n contenant tous les entiers de 0 \u00e0 n-1\n:retourne: rang entre 0 et n! -1\n:attention: le calcul avec les grands nombres\n:complexit\u00e9: O(n^2)`\n"}, {"name": "rank_permutation", "decription": "Compte tenu de la r et de n de trouver la permutation de {0,..,n-1}, avec rang selon\nvocabulaire de la commande \u00e9gale \u00e0 r\n\n:param r n: entiers avec 0 \u2264 r < n!\n:retourne: permutation p, comme une liste de n entiers\n:attention: le calcul avec les grands nombres\n:complexit\u00e9: O(n^2)`\n"}], "classes": []}}, {"EN": {"name": "rectangles_from_points", "description": "How many rectangles can be formed from a set of points\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "rectangles_from_points", "decription": "How many rectangles can be formed from a set of points\n\n    :param S: list of points, as coordinate pairs\n    :returns: the number of rectangles\n    :complexity: :math:`O(n^2)`\n    "}], "classes": []}, "FR": {"name": "rectangles_from_points", "description": "Combien de rectangles peuvent \u00eatre form\u00e9s \u00e0 partir d'un ensemble de points\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "rectangles_from_points", "decription": "Combien de rectangles peuvent \u00eatre form\u00e9s \u00e0 partir d'un ensemble de points\n\n:param S: liste des points de, que les paires de coordonn\u00e9es\n:retourne: le nombre de rectangles\n:complexit\u00e9: :math:`O(n^2)`\n"}], "classes": []}}, {"EN": {"name": "rectangles_from_grid", "description": "Largest area rectangle in a binary matrix\nplus grand rectangle monochromatique\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "rectangles_from_grid", "decription": "Largest area rectangle in a binary matrix\n\n    :param P: matrix\n    :param black: search for rectangles filled with value black\n    :returns: area, left, top, right, bottom of optimal rectangle\n             consisting of all (i,j) with\n             left <= j < right and top <= i <= bottom\n    :complexity: linear\n    "}], "classes": []}, "FR": {"name": "rectangles_from_grid", "description": "Plus grand rectangle correspondant \u00e0 la zone dans une matrice binaire\nplus grand rectangle monochromatique\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "rectangles_from_grid", "decription": "Plus grand rectangle correspondant \u00e0 la zone dans une matrice binaire\n\n:param P: matrice\n:param noir: recherche de rectangles rempli avec une valeur des noirs\n:r\u00e9sultat: domaine, gauche, haut, droite, bas optimale rectangle\ncompos\u00e9 de tous (i,j) avec\ngauche <= j < droite et de haut <= i <= en bas\n:complexit\u00e9: lin\u00e9aire\n"}], "classes": []}}, {"EN": {"name": "arithm_expr_eval", "description": "Evaluate an arithmetic expression\njill-jenn vie et christoph durr - 2014-2018\n\nIPCELLS\nhttp://www.spoj.com/problems/IPCELLS/\n", "functions": [{"name": "_readint", "decription": null}, {"name": "arithm_expr_eval", "decription": "Evaluates a given expression\n\n    :param expr: expression\n    :param cell: dictionary variable name -> expression\n\n    :returns: numerical value of expression\n\n    :complexity: linear\n    "}, {"name": "arithm_expr_parse", "decription": "Constructs an arithmetic expression tree\n\n    :param line_tokens: list of token strings containing the expression\n    :returns: expression tree\n\n    :complexity: linear\n    "}], "classes": []}, "FR": {"name": "arithm_expr_eval", "description": "\u00c9valuer une expression arithm\u00e9tique\njill-jenn vie et christoph durr - 2014-2018\n\nIPCELLS\nhttp://www.spoj.com/problems/IPCELLS/\n", "functions": [{"name": "_readint", "decription": null}, {"name": "arithm_expr_eval", "decription": "\u00c9value une expression donn\u00e9e\n\n:param expr: expression\n:param cellule: dictionnaire nom de la variable -> expression\n\n:retourne: une valeur num\u00e9rique de l'expression\n\n:complexit\u00e9: lin\u00e9aire\n"}, {"name": "arithm_expr_parse", "decription": "Construit une expression arithm\u00e9tique arbre\n\n:param line_tokens: liste de jeton de cha\u00eenes de caract\u00e8res contenant l'expression\n:retourne: arborescence d'expression\n\n:complexit\u00e9: lin\u00e9aire\n"}], "classes": []}}, {"EN": {"name": "topological_order", "description": "Topological order\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "topological_order", "decription": "Topological sorting by maintaining indegree\n\n    :param graph: directed graph in listlist format, cannot be listdict\n    :returns: list of vertices in order\n    :complexity: `O(|V|+|E|)`\n    "}, {"name": "topological_order_dfs", "decription": "Topological sorting by depth first search\n\n    :param graph: directed graph in listlist format, cannot be listdict\n    :returns: list of vertices in order\n    :complexity: `O(|V|+|E|)`\n    "}], "classes": []}, "FR": {"name": "topological_order", "description": "L'ordre topologique\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "topological_order", "decription": "Le tri topologique par le maintien de indegree\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:renvoie la liste des sommets dans l'ordre\n:complexit\u00e9: O(|V|+|E|)`\n"}, {"name": "topological_order_dfs", "decription": "Le tri topologique en profondeur d'abord de recherche\n\n:param graphe: graphe orient\u00e9 dans listlist format, ne peut pas \u00eatre listdict\n:renvoie la liste des sommets dans l'ordre\n:complexit\u00e9: O(|V|+|E|)`\n"}], "classes": []}}, {"EN": {"name": "dist_grid", "description": "Distances in a grid\njill-jenn vie et christoph durr - 2014-2018\n--------------------------------------------\n", "functions": [{"name": "dist_grid", "decription": "Distances in a grid by BFS\n\n    :param grid: matrix with 4-neighborhood\n    :param (int,int) source: pair of row, column ind_ices\n    :param (int,int) target: exploration stops if target is reached\n    :complexity: linear in grid size\n    "}], "classes": []}, "FR": {"name": "dist_grid", "description": "Les Distances dans une grille\njill-jenn vie et christoph durr - 2014-2018\n--------------------------------------------\n", "functions": [{"name": "dist_grid", "decription": "Les Distances dans une grille BFS\n\n:param grille: matrice avec le 4-voisinage\n:param (int,int) source: paire de ligne, de colonne ind_ices\n:param (int,int) cible: l'exploration s'arr\u00eate si l'objectif est atteint\n:complexit\u00e9: lin\u00e9aire dans la taille de la grille\n"}], "classes": []}}, {"EN": {"name": "dancing_links", "description": "Exact set cover by the dancing links algorithm\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "cover", "decription": null}, {"name": "dancing_links", "decription": "Exact set cover by the dancing links algorithm\n\n    :param size_universe: universe = {0, 1, ..., size_universe - 1}\n    :param sets: list of sets\n    :returns: list of set indices partitioning the universe, or None\n    :complexity: huge\n    "}, {"name": "solve", "decription": null}, {"name": "uncover", "decription": null}], "classes": [{"name": "Cell", "description": null, "methods": [{"name": "__init__", "description": null}, {"name": "hide_horiz", "description": null}, {"name": "hide_verti", "description": null}, {"name": "unhide_horiz", "description": null}, {"name": "unhide_verti", "description": null}]}]}, "FR": {"name": "dancing_links", "description": "Jeu Exact de couverture par la danse des liens algorithme\njill-jenn vie et christoph durr - 2014-2018\n", "functions": [{"name": "couvrir", "decription": null}, {"name": "dancing_links", "decription": "Jeu Exact de couverture par la danse des liens algorithme\n\n:param size_universe: univers = {0, 1, ..., size_universe - 1}\n:ensembles de param: liste de jeux\n:retourne: liste des indices de partitionnement de l'univers, ou Aucun\n:complexit\u00e9: \u00e9norme\n"}, {"name": "r\u00e9soudre", "decription": null}, {"name": "d\u00e9couvrir", "decription": null}], "classes": [{"name": "La cellule", "description": null, "methods": [{"name": "__init__", "description": null}, {"name": "hide_horiz", "description": null}, {"name": "hide_verti", "description": null}, {"name": "unhide_horiz", "description": null}, {"name": "unhide_verti", "description": null}]}]}}, {"EN": {"name": "max_interval_intersec", "description": "Sweepline algorithm technique\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "max_interval_intersec", "decription": "determine a value that is contained in a largest number\n    of given intervals\n\n    :param S: list of half open intervals\n    :complexity: O(n log n), where n = len(S)\n    "}], "classes": []}, "FR": {"name": "max_interval_intersec", "description": "Sweepline algorithme de la technique\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "max_interval_intersec", "decription": "d\u00e9terminer une valeur qui est contenue dans un plus grand nombre\ndes intervalles r\u00e9guliers\n\n:param S: liste de la moiti\u00e9 ouvert intervalles\n:complexit\u00e9: O(n log n), o\u00f9 n = len(S)\n"}], "classes": []}}, {"EN": {"name": "anagrams", "description": "Anagrams\nchristoph d\u00fcrr - jill-j\u00eann vie - 2013-2019\n", "functions": [{"name": "anagrams", "decription": "group a set of words into anagrams\n\n    :param S: set of strings\n    :returns: list of lists of strings\n\n    :complexity:\n        :math:`O(n k log k)` in average, for n words of length at most k.\n        :math:`O(n^2 k log k)` in worst case due to the usage of a dictionary.\n    "}], "classes": []}, "FR": {"name": "les anagrammes", "description": "Les anagrammes\nchristoph d\u00fcrr - jill-j\u00eann vie - 2013-2019\n", "functions": [{"name": "les anagrammes", "decription": "groupe un ensemble de mots en anagrammes\n\n:param S: ensemble de cha\u00eenes\n:retourne: liste de listes de cha\u00eenes\n\n:complexit\u00e9:\n:math:`O(n k log k)` en moyenne, pour les n mots de longueur au plus k.\n:math:`O(n^2 k log k)` dans le pire des cas en raison de l'utilisation d'un dictionnaire.\n"}], "classes": []}}, {"EN": {"name": "scalar", "description": "Permute vector to minimize scalar product\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "min_scalar_prod", "decription": "Permute vector to minimize scalar product\n\n    :param x:\n    :param y: x, y are vectors of same size\n    :returns: min sum x[i] * y[sigma[i]] over all permutations sigma\n    :complexity: O(n log n)\n    "}], "classes": []}, "FR": {"name": "scalaire", "description": "Permuter vecteur pour minimiser le produit scalaire\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "min_scalar_prod", "decription": "Permuter vecteur pour minimiser le produit scalaire\n\n:param x:\n:param y: x, y sont des vecteurs de m\u00eame taille\n:retourne: min somme x[i] * y[sigma[i]] sur toutes les permutations sigma\n:complexit\u00e9: O(n log n)\n"}], "classes": []}}, {"EN": {"name": "closest_points", "description": "Closest pair of points\ntrouver la paire de points la plus proche\njill-j\u00eann vie, christoph d\u00fcrr et louis abraham - 2014-2019\n", "functions": [{"name": "cell", "decription": " returns the grid cell coordinates containing the given point.\n    size is the side length of a grid cell\n\n    beware: in other languages negative coordinates need special care\n    in C++ for example int(-1.5) == -1 and not -2 as we need\n    hence we need floor(x / pas) in C++ using #include <cmath>\n    "}, {"name": "closest_points", "decription": "Closest pair of points\n\n    :param S: list of points\n    :requires: size of S at least 2\n    :modifies: changes the order in S\n    :returns: pair of points p,q from S with minimum Euclidean distance\n    :complexity: expected linear time\n    "}, {"name": "dist", "decription": null}, {"name": "improve", "decription": null}], "classes": []}, "FR": {"name": "closest_points", "description": "Paire de points les plus proches\ntrouver la paire de points la plus proche\njill-j\u00eann vie, christoph d\u00fcrr et louis abraham - 2014-2019\n", "functions": [{"name": "la cellule", "decription": " renvoie la grille des coordonn\u00e9es des cellules contenant le point donn\u00e9.\nla taille est la longueur du c\u00f4t\u00e9 d'une cellule de grille\n\nattention: dans d'autres langues des coordonn\u00e9es n\u00e9gatives besoin de soins sp\u00e9ciaux\nen C++ par exemple int(-1.5) == -1 et pas -2 comme nous avons besoin de\ndonc nous avons besoin d'\u00e9tage(x / pas) en C++ \u00e0 l'aide de #include <cmath>\n"}, {"name": "closest_points", "decription": "Paire de points les plus proches\n\n:param S: liste des points de\n:n\u00e9cessite: taille du S au moins 2\n:modifie: change l'ordre dans S\n:retourne: paire de points p,q de S avec un minimum de distance Euclidienne\n:complexit\u00e9: attendu lin\u00e9aire dans le temps\n"}, {"name": "dist", "decription": null}, {"name": "am\u00e9liorer", "decription": null}], "classes": []}}, {"EN": {"name": "knapsack", "description": "Knapsack\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "knapsack", "decription": "Knapsack problem: select maximum value set of items if total size not\n    more than capacity\n\n    :param p: table with size of items\n    :param v: table with value of items\n    :param cmax: capacity of bag\n    :requires: number of items non-zero\n    :returns: value optimal solution, list of item indexes in solution\n    :complexity: O(n * cmax), for n = number of items\n    "}, {"name": "knapsack2", "decription": "Knapsack problem: select maximum value set of items if total size not\n    more than capacity.\n    alternative implementation with same behavior.\n\n    :param p: table with size of items\n    :param v: table with value of items\n    :param cmax: capacity of bag\n    :requires: number of items non-zero\n    :returns: value optimal solution, list of item indexes in solution\n    :complexity: O(n * cmax), for n = number of items\n    "}], "classes": []}, "FR": {"name": "sac \u00e0 dos", "description": "Sac \u00e0 dos\njill-j\u00eann vie et christoph d\u00fcrr - 2015-2019\n", "functions": [{"name": "sac \u00e0 dos", "decription": "Probl\u00e8me de sac-\u00e0-dos: s\u00e9lectionnez le maximum de valeur ensemble d'\u00e9l\u00e9ments si la taille totale pas\nplus de capacit\u00e9\n\n:param p: tableau avec la taille des \u00e9l\u00e9ments\n:param v: tableau avec la valeur des articles\n:param cmax: capacit\u00e9 du sac\n:n\u00e9cessite: le nombre d'\u00e9l\u00e9ments non nuls\n:retourne: valeur de la solution optimale, la liste de l'\u00e9l\u00e9ment d'index dans la solution\n:complexit\u00e9: O(n * cmax), pour n = nombre d'\u00e9l\u00e9ments\n"}, {"name": "knapsack2", "decription": "Probl\u00e8me de sac-\u00e0-dos: s\u00e9lectionnez le maximum de valeur ensemble d'\u00e9l\u00e9ments si la taille totale pas\nplus de capacit\u00e9.\nla variante de mise en \u0153uvre avec le m\u00eame comportement.\n\n:param p: tableau avec la taille des \u00e9l\u00e9ments\n:param v: tableau avec la valeur des articles\n:param cmax: capacit\u00e9 du sac\n:n\u00e9cessite: le nombre d'\u00e9l\u00e9ments non nuls\n:retourne: valeur de la solution optimale, la liste de l'\u00e9l\u00e9ment d'index dans la solution\n:complexit\u00e9: O(n * cmax), pour n = nombre d'\u00e9l\u00e9ments\n"}], "classes": []}}, {"EN": {"name": "union_rectangles", "description": "Union of rectangles\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "rectangles_contains_point", "decription": "Decides if at least one of the given rectangles contains a given point\n    either strictly or on its left or top border\n    "}, {"name": "union_intervals", "decription": "Size of the union of a set of intervals\n\n    Sweep from left to right.\n    Maintain in a counter number of opened intervals\n    minus number of closed intervals.\n\n    :param intervals: Counter, which describes a multiset of intervals.\n        an interval is a pair of values.\n    :returns: size of the union of those intervals\n    :complexity: :math:`O(n \\log n)`\n    "}, {"name": "union_rectangles", "decription": "Area of union of rectangles.\n\n    Sweep from top to bottom.\n    Maintain in a set the horizontal projection of rectangles,\n    for which the top border has been processed but not yet the bottom.\n\n    :param R: list of rectangles defined by (x1, y1, x2, y2)\n       where (x1, y1) is top left corner and (x2, y2) bottom right corner\n    :returns: area\n    :complexity: :math:`O(n^2 \\log n)`\n    "}, {"name": "union_rectangles_fast", "decription": "Area of union of rectangles\n\n    :param R: list of rectangles defined by (x1, y1, x2, y2)\n       where (x1, y1) is top left corner and (x2, y2) bottom right corner\n    :returns: area\n    :complexity: :math:`O(n^2)`\n    "}, {"name": "union_rectangles_fastest", "decription": "Area of union of rectangles\n\n    :param R: list of rectangles defined by (x1, y1, x2, y2)\n       where (x1, y1) is top left corner and (x2, y2) bottom right corner\n    :returns: area\n    :complexity: :math:`O(n \\log n)`\n    "}, {"name": "union_rectangles_naive", "decription": "Area of union of rectangles\n\n    :param R: list of rectangles defined by (x1, y1, x2, y2)\n       where (x1, y1) is top left corner and (x2, y2) bottom right corner\n    :returns: area\n    :complexity: :math:`O(n^3)`\n    "}], "classes": [{"name": "CoverQuery", "description": "Segment tree to maintain a set of integer intervals\n    and permitting to query the size of their union.\n    ", "methods": [{"name": "__init__", "description": "creates a structure, where all possible intervals\n        will be included in [0, L - 1].\n        "}, {"name": "_change", "description": null}, {"name": "change", "description": "when offset = +1, adds an interval [i, k],\n        when offset = -1, removes it\n        :complexity: O(log L)\n        "}, {"name": "cover", "description": ":returns: the size of the union of the stored intervals\n        "}]}]}, "FR": {"name": "union_rectangles", "description": "Union des rectangles\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "rectangles_contains_point", "decription": "D\u00e9cide si au moins l'une des rectangles contient un point donn\u00e9\nsoit strictement ou sur sa gauche ou en haut de la fronti\u00e8re\n"}, {"name": "union_intervals", "decription": "La taille de l'union d'un ensemble d'intervalles\n\nBalayage de gauche \u00e0 droite.\nMaintenir dans un num\u00e9ro de compteur d'intervalles ouverts\nmoins nombre d'intervalles ferm\u00e9s.\n\n:param intervalles: Compteur, qui d\u00e9crit un multiset d'intervalles.\nun intervalle est une paire de valeurs.\n:retourne: la taille de l'union de ces intervalles\n:complexit\u00e9: :math:`O(n \\log n)`\n"}, {"name": "union_rectangles", "decription": "La zone de l'union des rectangles.\n\nBalayage du haut vers le bas.\nMaintenir dans un jeu de la projection horizontale de rectangles,\npour ce qui de la fronti\u00e8re sup\u00e9rieure a \u00e9t\u00e9 trait\u00e9e, mais pas encore la bas.\n\n:param R: liste de rectangles d\u00e9finis par (x1, y1, x2, y2)\no\u00f9 (x1, y1) est en haut \u00e0 gauche et (x2, y2) coin en bas \u00e0 droite\n:r\u00e9sultat: domaine\n:complexit\u00e9: :math:`O(n^2 \\log n)`\n"}, {"name": "union_rectangles_fast", "decription": "La zone de l'union des rectangles\n\n:param R: liste de rectangles d\u00e9finis par (x1, y1, x2, y2)\no\u00f9 (x1, y1) est en haut \u00e0 gauche et (x2, y2) coin en bas \u00e0 droite\n:r\u00e9sultat: domaine\n:complexit\u00e9: :math:`O(n^2)`\n"}, {"name": "union_rectangles_fastest", "decription": "La zone de l'union des rectangles\n\n:param R: liste de rectangles d\u00e9finis par (x1, y1, x2, y2)\no\u00f9 (x1, y1) est en haut \u00e0 gauche et (x2, y2) coin en bas \u00e0 droite\n:r\u00e9sultat: domaine\n:complexit\u00e9: :math:`O(n \\log n)`\n"}, {"name": "union_rectangles_naive", "decription": "La zone de l'union des rectangles\n\n:param R: liste de rectangles d\u00e9finis par (x1, y1, x2, y2)\no\u00f9 (x1, y1) est en haut \u00e0 gauche et (x2, y2) coin en bas \u00e0 droite\n:r\u00e9sultat: domaine\n:complexit\u00e9: :math:`O(n^3)`\n"}], "classes": [{"name": "CoverQuery", "description": "Segment de l'arbre afin de maintenir un ensemble d'entiers \u00e0 intervalles\net de permettre \u00e0 la requ\u00eate de la taille de leur union.\n", "methods": [{"name": "__init__", "description": "cr\u00e9e une structure, o\u00f9 tout est possible intervalles\nseront inclus dans [0, L - 1].\n"}, {"name": "_change", "description": null}, {"name": "changement", "description": "quand offset = +1, ajoute un intervalle [i, k],\nquand offset = -1, la supprime\n:complexit\u00e9: O(log L)\n"}, {"name": "couvrir", "description": ":renvoie la taille de l'union de la stock\u00e9es intervalles\n"}]}]}}, {"EN": {"name": "bfs", "description": "Breadth-first search, bfs and OurQueue\nchristoph d\u00fcrr - jill-j\u00eann vie - 2015-2019\n", "functions": [{"name": "bfs", "decription": "Shortest path in unweighted graph by BFS\n\n       :param graph: directed graph in listlist or listdict format\n       :param int start: source vertex\n       :returns: distance table, precedence table\n       :complexity: `O(|V|+|E|)`\n       "}], "classes": []}, "FR": {"name": "bfs", "description": "En largeur d'abord de recherche, bfs et OurQueue\nchristoph d\u00fcrr - jill-j\u00eann vie - la p\u00e9riode 2015-2019\n", "functions": [{"name": "bfs", "decription": "Plus court chemin dans le graphe non pond\u00e9r\u00e9 par BFS\n\n:param graphe: graphe orient\u00e9 dans listlist ou listdict format\n:param int start: source: vertex\n:retourne: distance de table, table de pr\u00e9c\u00e9dence\n:complexit\u00e9: O(|V|+|E|)`\n"}], "classes": []}}, {"EN": {"name": "pq_tree", "description": "c.durr - 2017-2019\n\n\n    Solve the consecutive all ones column problem using PQ-trees\n\n    In short, a PQ-tree represents sets of total orders over a ground set. The\n    leafs are the values of the ground set. Inner nodes are of type P or Q. P\n    means all permutations of the children are allowed. Q means only the left\n    to right or the right to left order of the children is allowed.\n\n    The method restrict(S), changes the tree such that it represents only\n    total orders which would leave the elements of the set S consecutive.  The\n    complexity of restrict is linear in the tree size.\n\n    References:\n\n    [W] https://en.wikipedia.org/wiki/PQ_tree\n\n    [L10] Richard Ladner, slides.\n        https://courses.cs.washington.edu/courses/cse421/10au/lectures/PQ.pdf\n\n    [H00] Mohammad Taghi Hajiaghayi, notes.\n        http://www-math.mit.edu/~hajiagha/pp11.ps\n\n\n    Disclaimer: this implementation does not have the optimal time complexity.\n    And also there are more recent and easier algorithms for this problem.\n\n", "functions": [{"name": "consecutive_ones_property", "decription": " Check the consecutive ones property.\n\n    :param list sets: is a list of subsets of the ground set.\n    :param groundset: is the set of all elements,\n                by default it is the union of the given sets\n    :returns: returns a list of the ordered ground set where\n              every given set is consecutive,\n              or None if there is no solution.\n    :complexity: O(len(groundset) * len(sets))\n    :disclaimer: an optimal implementation would have complexity\n                 O(len(groundset) + len(sets) + sum(map(len,sets))),\n                 and there are more recent easier algorithms for this problem.\n    "}], "classes": [{"name": "IsNotC1P", "description": "The given instance does not have the all consecutive ones property", "methods": []}, {"name": "PQNode", "description": null, "methods": [{"name": "__init__", "description": null}, {"name": "__str__", "description": null}, {"name": "add", "description": "Add one node as descendant\n        "}, {"name": "add_all", "description": null}, {"name": "add_group", "description": "Add elements of L as descendants of the node.\n        If there are several elements in L, group them in a P-node first\n        "}, {"name": "border", "description": "Append to L the border of the subtree.\n        "}]}, {"name": "PQTree", "description": null, "methods": [{"name": "__init__", "description": null}, {"name": "__str__", "description": "returns a string representation,\n        () for P nodes and [] for Q nodes\n        "}, {"name": "border", "description": "returns the list of the leafs in order\n        "}, {"name": "reduce", "description": null}]}]}, "FR": {"name": "pq_tree", "description": "c.durr - 2017-2019\n\n\nR\u00e9soudre cons\u00e9cutive, de tous ceux de la colonne de probl\u00e8me \u00e0 l'aide de PQ-arbres\n\nEn bref, un PQ-tree repr\u00e9sente des ensembles de commandes de plus de un terrain de jeu. L'\nleafs sont les valeurs de la terre ensemble. Int\u00e9rieure n\u0153uds sont de type P ou Q. P\nsignifie toutes les permutations de ces enfants sont autoris\u00e9s. Q signifie seulement la gauche\n\u00e0 droite ou de droite \u00e0 gauche des enfants est autoris\u00e9.\n\nLa m\u00e9thode restrict(S), les modifications de l'arbre tel qu'il ne repr\u00e9sente qu'\ntotal des commandes qui laisserait les \u00e9l\u00e9ments de l'ensemble S cons\u00e9cutifs. L'\nla complexit\u00e9 de restreindre l'est lin\u00e9aire en la taille de l'arbre.\n\nR\u00e9f\u00e9rences:\n\n[W] https://en.wikipedia.org/wiki/PQ_tree\n\n[L10] Richard Ladner, diapositives.\nhttps://courses.cs.washington.edu/courses/cse421/10au/lectures/PQ.pdf\n\n[H00] Mohammad Taghi Hajiaghayi, notes.\nhttp://www-math.mit.edu/~hajiagha/pp11.ps\n\n\nAvertissement: cette application n'a pas le temps optimal de la complexit\u00e9.\nEt aussi il y a de plus r\u00e9cent et le plus simple des algorithmes pour r\u00e9soudre ce probl\u00e8me.\n\n", "functions": [{"name": "consecutive_ones_property", "decription": " V\u00e9rifier l'cons\u00e9cutifs \u00e0 la propri\u00e9t\u00e9.\n\n:param liste de jeux: une liste de sous-ensembles de la terre ensemble.\n:param groundset: est l'ensemble de tous les \u00e9l\u00e9ments,\npar d\u00e9faut, c'est l'union des ensembles\n:retourne: renvoie une liste de la commande, terrain de jeu o\u00f9\nchaque ensemble est cons\u00e9cutive,\nou Aucun si il n'y a pas de solution.\n:complexit\u00e9: O(len(groundset) * len(jeux))\n:avertissement: une mise en \u0153uvre optimale aurait complexit\u00e9\nO(len(groundset) + len(fixe) + somme(carte(len,jeux))),\net il y a de plus r\u00e9cent plus facile d'algorithmes pour r\u00e9soudre ce probl\u00e8me.\n"}], "classes": [{"name": "IsNotC1P", "description": "L'instance donn\u00e9e n'a pas du tout cons\u00e9cutifs de la propri\u00e9t\u00e9", "methods": []}, {"name": "PQNode", "description": null, "methods": [{"name": "__init__", "description": null}, {"name": "__str__", "description": null}, {"name": "ajouter", "description": "Ajouter un n\u0153ud descendant\n"}, {"name": "add_all", "description": null}, {"name": "add_group", "description": "Ajouter des \u00e9l\u00e9ments de L comme les descendants du n\u0153ud.\nSi il y a plusieurs \u00e9l\u00e9ments dans L, groupe dans un n\u0153ud-P premier\n"}, {"name": "la fronti\u00e8re", "description": "Ajouter \u00e0 L de la fronti\u00e8re de la sous-arborescence.\n"}]}, {"name": "PQTree", "description": null, "methods": [{"name": "__init__", "description": null}, {"name": "__str__", "description": "renvoie une repr\u00e9sentation sous forme de cha\u00eene,\n() pour les noeuds P et [] pour Q n\u0153uds\n"}, {"name": "la fronti\u00e8re", "description": "retourne la liste des maple leafs dans l'ordre\n"}, {"name": "r\u00e9duire", "description": null}]}]}}, {"EN": {"name": "laser_mirrors", "description": "Orienting mirrors to allow connectivity by a laser beam\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "laser_mirrors", "decription": "Orienting mirrors to allow reachability by laser beam\n\n    :param int rows:\n    :param int cols: rows and cols are the dimension of the grid\n    :param mir: list of mirror coordinates, except\n                mir[0]= laser entrance,\n                mir[-1]= laser exit.\n    :complexity: :math:`O(2^n)`\n    "}, {"name": "solve", "decription": "Can a laser leaving mirror i in direction direc reach exit ?\n\n    :param i: mirror index\n    :param direc: direction leaving mirror i\n    :param orient: orient[i]=orientation of mirror i\n    :param succ: succ[i][direc]=succ mirror reached\n                 when leaving i in direction direc\n    "}], "classes": []}, "FR": {"name": "laser_mirrors", "description": "Orienter les miroirs, pour permettre la connectivit\u00e9 par un faisceau laser\njill-j\u00eann vie et christoph d\u00fcrr - 2014-2019\n", "functions": [{"name": "laser_mirrors", "decription": "Orienter les miroirs pour permettre l'accessibilit\u00e9 par faisceau laser\n\n:param int lignes:\n:param int cols: les lignes et les colonnes sont les dimension de la grille\n:param mir: liste de miroir coordonn\u00e9es, \u00e0 l'exception de\nmir[0]= laser d'entr\u00e9e,\nmir[-1]= sortie du laser.\n:complexit\u00e9: :math:`O(2^n)`\n"}, {"name": "r\u00e9soudre", "decription": "Un laser peut-il quitter le miroir j'en direction direc atteindre la sortie ?\n\n:param i: miroir de l'indice de\n:param administration: la direction de quitter miroir, je\n:param orient: l'orient[i]=orientation du miroir, je\n:param succ: succ[i][administration]=succ miroir atteint\nau moment de quitter j'en direction direc\n"}], "classes": []}}]